theory Mastercard_SDA_OnlinePIN_High begin

// Function signature and definition of the equational theory E

builtins: xor
functions: MAC/2, MAC_arpc/2, NEq/2, adec/2, aenc/2, f/2, fst/1, h/1,
           p8/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) Terminal_Bank_Network:
   [ Send( S, R, channelID, msg ) ] --> [ Recv( S, R, channelID, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Generate_Amount_Low:
   [ ] --[ Once( <$amount, 'Amount'> ) ]-> [ !Value( $amount, 'Low' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Generate_Amount_High:
   [ ] --[ Once( <$amount, 'Amount'> ) ]-> [ !Value( $amount, 'High' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Generate_ATC:
   [ Fr( ~ATC ) ] --> [ !ATC( ~ATC ), Out( ~ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Generate_SDAD_Format_Visa:
   [ ] --> [ !SDADFormat( '05', 'TC' ), !SDADFormat( '95', 'ARQC' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_CA:
   [ Fr( ~privkCA ) ]
  --[ Once( $CA ), Role( $CA, 'CA' ) ]->
   [
   !LtkCA( $CA, ~privkCA ),
   !CertCA( $CA,
            <<'01', $CA, pk(~privkCA), $CA>, 
             sign(<'01', $CA, pk(~privkCA), $CA>, ~privkCA)>
   ),
   Out( pk(~privkCA) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_Bank:
   [ Fr( ~privkBank ), !LtkCA( $CA, ~privkCA ) ]
  --[ Once( $Bank ), Role( $Bank, 'Bank' ) ]->
   [
   !LtkBank( $Bank, ~privkBank ),
   !CertBank( $Bank,
              <<'02', $Bank, pk(~privkBank), $CA>, 
               sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)>
   ),
   !IssuingCA( $Bank, $CA ), Out( pk(~privkBank) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_CA:
   [ !LtkCA( $CA, ~privkCA ) ] --[ Compromise( $CA ) ]-> [ Out( ~privkCA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Bank:
   [ !LtkBank( $Bank, ~privkBank ) ]
  --[ Compromise( $Bank ) ]->
   [ Out( <$Bank, ~privkBank> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Card:
   [ !LtkCard( ~PAN, ~privkCard ) ]
  --[ Compromise( ~PAN ) ]->
   [ Out( <~PAN, ~privkCard> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Bank_Card_ShK:
   [ !IssuingBank( ~PAN, $Bank ), !Shk( ~PAN, ~MK ) ]
  --[ Compromise( $Bank ), Compromise( ~PAN ) ]->
   [ Out( ~MK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Set_PIN:
   [ Fr( ~PIN ), Set_PIN( ~PAN, CVM, $CA, $Bank ) ]
  --[
  NEq( CVM, 'NoPIN' ), SecretPIN( ~PIN ), Honest( $CA ), Honest( $Bank ),
  Honest( ~PAN )
  ]->
   [
   !PIN( ~PAN, ~PIN ), !Entered_PIN( ~PAN, ~PIN ),
   !Entered_PIN( ~PAN, 'WrongPIN' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_Card:
   [
   Fr( ~PAN ), Fr( ~expDate ), Fr( ~MK ), !LtkBank( $Bank, ~privkBank ),
   !CertBank( $Bank, certBank ), !IssuingCA( $Bank, $CA ), In( <auth, CVM> )
   ]
  --[
  Role( ~PAN, 'Card' ), SecretPAN( ~PAN ), SecretMK( ~MK ), Honest( $CA ),
  Honest( $Bank ), Honest( ~PAN )
  ]->
   [
   !AIP( ~PAN, <auth, $furtherData> ), !AID( ~PAN, 'Mastercard' ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank ),
   Set_Records( ~PAN, ~expDate, $CA, certBank,
                sign(<'03', ~PAN, ~expDate, auth, $furtherData>, ~privkBank), CVM
   ),
   Set_PIN( ~PAN, CVM, $CA, $Bank )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Set_Records_SDA:
   [
   Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM ),
   !AIP( ~PAN, <'SDA', furtherData> )
   ]
  -->
   [ !Records( ~PAN, <~PAN, ~expDate, $CA, certBank, SSAD, CVM> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Set_Records_NotSDA:
   [
   Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM ),
   Fr( ~privkCard ), !AIP( ~PAN, AIP ), !IssuingBank( ~PAN, $Bank ),
   !LtkBank( $Bank, ~privkBank )
   ]
  --[
  NEq( fst(AIP), 'SDA' ), SecretPrivkCard( ~privkCard ), Honest( $CA ),
  Honest( $Bank ), Honest( ~PAN )
  ]->
   [
   Out( pk(~privkCard) ), !LtkCard( ~PAN, ~privkCard ),
   !Records( ~PAN,
             <~PAN, ~expDate, $CA, certBank, 
              <<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, 
               sign(<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, ~privkBank)>, 
              CVM>
   )
   ]

  /*
  rule (modulo AC) Set_Records_NotSDA:
     [
     Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM ),
     Fr( ~privkCard ), !AIP( ~PAN, AIP ), !IssuingBank( ~PAN, $Bank ),
     !LtkBank( $Bank, ~privkBank )
     ]
    --[
    NEq( z, 'SDA' ), SecretPrivkCard( ~privkCard ), Honest( $CA ),
    Honest( $Bank ), Honest( ~PAN )
    ]->
     [
     Out( pk(~privkCard) ), !LtkCard( ~PAN, ~privkCard ),
     !Records( ~PAN,
               <~PAN, ~expDate, $CA, certBank, 
                <<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, 
                 sign(<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, ~privkBank)>, 
                CVM>
     )
     ]
    variants (modulo AC)
    1. AIP   = AIP.14
       z     = fst(AIP.14)
    
    2. AIP   = <z.17, x.21>
       z     = z.17
  */

rule (modulo E) Terminal_Sends_GPO:
   [ Fr( ~UN ), !Value( $amount, value ) ]
  --[ OneTerminal( ), Role( $Terminal, 'Terminal' ) ]->
   [
   Out( <'GET_PROCESSING_OPTIONS', $amount, 'Switzerland', 'CHF', 'YYMMDD', 
         'Purchase', ~UN>
   ),
   Terminal_Sent_GPO( $Terminal,
                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GPO:
   [
   In( <'GET_PROCESSING_OPTIONS', PDOL> ), !AIP( ~PAN, AIP ),
   !AID( ~PAN, 'Mastercard' ), !ATC( ATC )
   ]
  --[ OneCard( ), Once( <~PAN, ATC, 'Card'> ) ]->
   [ Out( <AIP, 'AFL'> ), Card_Responded_To_GPO( ~PAN, PDOL, ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_ReadRecord:
   [ Terminal_Sent_GPO( $Terminal, PDOL ), In( <AIP, 'AFL'> ) ]
  -->
   [
   Out( <'READ_RECORD', 'AFL'> ),
   Terminal_Sent_ReadRecord( $Terminal, PDOL, AIP )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_ReadRecord_NotDDA:
   [
   Card_Responded_To_GPO( ~PAN, PDOL, ATC ), !AIP( ~PAN, AIP ),
   !Records( ~PAN, records ), In( <'READ_RECORD', 'AFL'> )
   ]
  --[ NEq( fst(AIP), 'DDA' ) ]->
   [ Out( records ), Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC ) ]

  /*
  rule (modulo AC) Card_Responds_To_ReadRecord_NotDDA:
     [
     Card_Responded_To_GPO( ~PAN, PDOL, ATC ), !AIP( ~PAN, AIP ),
     !Records( ~PAN, records ), In( <'READ_RECORD', 'AFL'> )
     ]
    --[ NEq( z, 'DDA' ) ]->
     [ Out( records ), Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC ) ]
    variants (modulo AC)
    1. AIP   = AIP.10
       z     = fst(AIP.10)
    
    2. AIP   = <z.15, x.21>
       z     = z.15
  */

rule (modulo E) Card_Responds_To_ReadRecord_DDA:
   [
   Card_Responded_To_GPO( ~PAN, PDOL, ATC ), !Records( ~PAN, records ),
   !AIP( ~PAN, <'DDA', furtherData> ), In( <'READ_RECORD', 'AFL'> )
   ]
  -->
   [ Out( records ), Card_Ready_For_DDA( ~PAN, PDOL, ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_Records_SDA:
   [
   Terminal_Sent_ReadRecord( $Terminal, PDOL, <'SDA', furtherData> ),
   In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, SSAD, CVM
       >
   ),
   !IssuingCA( $Bank, $CA ),
   !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
   ]
  --[
  Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
  Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
  Eq( verify(SSAD, <'03', ~PAN, expDate, 'SDA', furtherData>, pubkBank),
      true
  )
  ]->
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                           <'SDA', furtherData>, pubkBank, 'Null', CVM
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_Records_SDA:
     [
     Terminal_Sent_ReadRecord( $Terminal, PDOL, <'SDA', furtherData> ),
     In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, SSAD, CVM
         >
     ),
     !IssuingCA( $Bank, $CA ),
     !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ) ]->
     [
     Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                             <'SDA', furtherData>, pubkBank, 'Null', CVM
     )
     ]
    variants (modulo AC)
    1. $Bank = $Bank.34
       $CA   = $CA.35
       ~PAN  = ~PAN.37
       SSAD  = SSAD.40
       expDate
             = expDate.41
       furtherData
             = furtherData.42
       pubkBank
             = pubkBank.43
       pubkCA
             = pubkCA.44
       sign1 = sign1.45
       sign2 = sign2.46
       z     = verify(sign1.45, <'01', $CA.35, pubkCA.44, $CA.35>, pubkCA.44)
       z.1   = verify(sign2.46, <'02', $Bank.34, pubkBank.43, $CA.35>,
                      pubkCA.44)
       z.2   = verify(SSAD.40,
                      <'03', ~PAN.37, expDate.41, 'SDA', furtherData.42>, pubkBank.43)
    
    2. $Bank = $Bank.87
       $CA   = $CA.88
       ~PAN  = ~PAN.90
       SSAD  = sign(<'03', ~PAN.90, expDate.94, 'SDA', furtherData.95>, x.172)
       expDate
             = expDate.94
       furtherData
             = furtherData.95
       pubkBank
             = pk(x.172)
       pubkCA
             = pubkCA.97
       sign1 = sign1.98
       sign2 = sign2.99
       z     = verify(sign1.98, <'01', $CA.88, pubkCA.97, $CA.88>, pubkCA.97)
       z.1   = verify(sign2.99, <'02', $Bank.87, pk(x.172), $CA.88>, pubkCA.97)
       z.2   = true
    
    3. $Bank = $Bank.90
       $CA   = $CA.91
       ~PAN  = ~PAN.93
       SSAD  = sign(<'03', ~PAN.93, expDate.97, 'SDA', furtherData.98>, x.177)
       expDate
             = expDate.97
       furtherData
             = furtherData.98
       pubkBank
             = pk(x.177)
       pubkCA
             = pk(x.178)
       sign1 = sign(<'01', $CA.91, pk(x.178), $CA.91>, x.178)
       sign2 = sign2.102
       z     = true
       z.1   = verify(sign2.102, <'02', $Bank.90, pk(x.177), $CA.91>, pk(x.178))
       z.2   = true
    
    4. $Bank = $Bank.91
       $CA   = $CA.92
       ~PAN  = ~PAN.94
       SSAD  = SSAD.97
       expDate
             = expDate.98
       furtherData
             = furtherData.99
       pubkBank
             = pubkBank.100
       pubkCA
             = pk(x.180)
       sign1 = sign(<'01', $CA.92, pk(x.180), $CA.92>, x.180)
       sign2 = sign2.103
       z     = true
       z.1   = verify(sign2.103, <'02', $Bank.91, pubkBank.100, $CA.92>,
                      pk(x.180))
       z.2   = verify(SSAD.97,
                      <'03', ~PAN.94, expDate.98, 'SDA', furtherData.99>, pubkBank.100)
    
    5. $Bank = $Bank.91
       $CA   = $CA.92
       ~PAN  = ~PAN.94
       SSAD  = sign(<'03', ~PAN.94, expDate.98, 'SDA', furtherData.99>, x.179)
       expDate
             = expDate.98
       furtherData
             = furtherData.99
       pubkBank
             = pk(x.179)
       pubkCA
             = pk(x.180)
       sign1 = sign1.102
       sign2 = sign(<'02', $Bank.91, pk(x.179), $CA.92>, x.180)
       z     = verify(sign1.102, <'01', $CA.92, pk(x.180), $CA.92>, pk(x.180))
       z.1   = true
       z.2   = true
    
    6. $Bank = $Bank.91
       $CA   = $CA.92
       ~PAN  = ~PAN.94
       SSAD  = sign(<'03', ~PAN.94, expDate.98, 'SDA', furtherData.99>, x.179)
       expDate
             = expDate.98
       furtherData
             = furtherData.99
       pubkBank
             = pk(x.179)
       pubkCA
             = pk(x.180)
       sign1 = sign(<'01', $CA.92, pk(x.180), $CA.92>, x.180)
       sign2 = sign(<'02', $Bank.91, pk(x.179), $CA.92>, x.180)
       z     = true
       z.1   = true
       z.2   = true
    
    7. $Bank = $Bank.92
       $CA   = $CA.93
       ~PAN  = ~PAN.95
       SSAD  = SSAD.98
       expDate
             = expDate.99
       furtherData
             = furtherData.100
       pubkBank
             = pubkBank.101
       pubkCA
             = pk(x.182)
       sign1 = sign1.103
       sign2 = sign(<'02', $Bank.92, pubkBank.101, $CA.93>, x.182)
       z     = verify(sign1.103, <'01', $CA.93, pk(x.182), $CA.93>, pk(x.182))
       z.1   = true
       z.2   = verify(SSAD.98,
                      <'03', ~PAN.95, expDate.99, 'SDA', furtherData.100>, pubkBank.101)
    
    8. $Bank = $Bank.92
       $CA   = $CA.93
       ~PAN  = ~PAN.95
       SSAD  = SSAD.98
       expDate
             = expDate.99
       furtherData
             = furtherData.100
       pubkBank
             = pubkBank.101
       pubkCA
             = pk(x.182)
       sign1 = sign(<'01', $CA.93, pk(x.182), $CA.93>, x.182)
       sign2 = sign(<'02', $Bank.92, pubkBank.101, $CA.93>, x.182)
       z     = true
       z.1   = true
       z.2   = verify(SSAD.98,
                      <'03', ~PAN.95, expDate.99, 'SDA', furtherData.100>, pubkBank.101)
  */

rule (modulo E) Terminal_Receives_Records_CDA:
   [
   Terminal_Sent_ReadRecord( $Terminal, PDOL, <'CDA', furtherData> ),
   In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
        <<'04', ~PAN, pubkCard, $Bank, CVM, 'CDA', furtherData>, sign3>, CVM>
   ),
   !IssuingCA( $Bank, $CA ),
   !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
   ]
  --[
  Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
  Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
  Eq( verify(sign3, <'04', ~PAN, pubkCard, $Bank, CVM, 'CDA', furtherData>,
             pubkBank),
      true
  )
  ]->
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                           <'CDA', furtherData>, pubkBank, pubkCard, CVM
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_Records_CDA:
     [
     Terminal_Sent_ReadRecord( $Terminal, PDOL, <'CDA', furtherData> ),
     In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
          <<'04', ~PAN, pubkCard, $Bank, CVM, 'CDA', furtherData>, sign3>, CVM>
     ),
     !IssuingCA( $Bank, $CA ),
     !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ) ]->
     [
     Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                             <'CDA', furtherData>, pubkBank, pubkCard, CVM
     )
     ]
    variants (modulo AC)
    1. $Bank = $Bank.36
       $CA   = $CA.37
       ~PAN  = ~PAN.39
       CVM   = CVM.40
       furtherData
             = furtherData.43
       pubkBank
             = pubkBank.44
       pubkCA
             = pubkCA.45
       pubkCard
             = pubkCard.46
       sign1 = sign1.47
       sign2 = sign2.48
       sign3 = sign3.49
       z     = verify(sign1.47, <'01', $CA.37, pubkCA.45, $CA.37>, pubkCA.45)
       z.1   = verify(sign2.48, <'02', $Bank.36, pubkBank.44, $CA.37>,
                      pubkCA.45)
       z.2   = verify(sign3.49,
                      <'04', ~PAN.39, pubkCard.46, $Bank.36, CVM.40, 'CDA', furtherData.43>,
                      pubkBank.44)
    
    2. $Bank = $Bank.94
       $CA   = $CA.95
       ~PAN  = ~PAN.97
       CVM   = CVM.98
       furtherData
             = furtherData.101
       pubkBank
             = pubkBank.102
       pubkCA
             = pk(x.186)
       pubkCard
             = pubkCard.104
       sign1 = sign(<'01', $CA.95, pk(x.186), $CA.95>, x.186)
       sign2 = sign2.106
       sign3 = sign3.107
       z     = true
       z.1   = verify(sign2.106, <'02', $Bank.94, pubkBank.102, $CA.95>,
                      pk(x.186))
       z.2   = verify(sign3.107,
                      <'04', ~PAN.97, pubkCard.104, $Bank.94, CVM.98, 'CDA', furtherData.101>,
                      pubkBank.102)
    
    3. $Bank = $Bank.94
       $CA   = $CA.95
       ~PAN  = ~PAN.97
       CVM   = CVM.98
       furtherData
             = furtherData.101
       pubkBank
             = pk(x.186)
       pubkCA
             = pubkCA.103
       pubkCard
             = pubkCard.104
       sign1 = sign1.105
       sign2 = sign2.106
       sign3 = sign(<'04', ~PAN.97, pubkCard.104, $Bank.94, CVM.98, 'CDA', 
                     furtherData.101>,
                    x.186)
       z     = verify(sign1.105, <'01', $CA.95, pubkCA.103, $CA.95>, pubkCA.103)
       z.1   = verify(sign2.106, <'02', $Bank.94, pk(x.186), $CA.95>,
                      pubkCA.103)
       z.2   = true
    
    4. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pubkBank.103
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign1.106
       sign2 = sign(<'02', $Bank.95, pubkBank.103, $CA.96>, x.188)
       sign3 = sign3.108
       z     = verify(sign1.106, <'01', $CA.96, pk(x.188), $CA.96>, pk(x.188))
       z.1   = true
       z.2   = verify(sign3.108,
                      <'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'CDA', furtherData.102>,
                      pubkBank.103)
    
    5. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pubkBank.103
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign(<'02', $Bank.95, pubkBank.103, $CA.96>, x.188)
       sign3 = sign3.108
       z     = true
       z.1   = true
       z.2   = verify(sign3.108,
                      <'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'CDA', furtherData.102>,
                      pubkBank.103)
    
    6. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign1.106
       sign2 = sign(<'02', $Bank.95, pk(x.187), $CA.96>, x.188)
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'CDA', 
                     furtherData.102>,
                    x.187)
       z     = verify(sign1.106, <'01', $CA.96, pk(x.188), $CA.96>, pk(x.188))
       z.1   = true
       z.2   = true
    
    7. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign2.107
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'CDA', 
                     furtherData.102>,
                    x.187)
       z     = true
       z.1   = verify(sign2.107, <'02', $Bank.95, pk(x.187), $CA.96>, pk(x.188))
       z.2   = true
    
    8. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign(<'02', $Bank.95, pk(x.187), $CA.96>, x.188)
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'CDA', 
                     furtherData.102>,
                    x.187)
       z     = true
       z.1   = true
       z.2   = true
  */

rule (modulo E) Terminal_Receives_Records_DDA:
   [
   Terminal_Sent_ReadRecord( $Terminal, PDOL, <'DDA', furtherData> ),
   !IssuingCA( $Bank, $CA ),
   In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
        <<'04', ~PAN, pubkCard, $Bank, CVM, 'DDA', furtherData>, sign3>, CVM>
   ),
   !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
   ]
  --[
  Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
  Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
  Eq( verify(sign3, <'04', ~PAN, pubkCard, $Bank, CVM, 'DDA', furtherData>,
             pubkBank),
      true
  )
  ]->
   [
   Terminal_Ready_For_DDA( $Terminal, ~PAN, $Bank, $CA, PDOL,
                           <'DDA', furtherData>, pubkBank, pubkCard, CVM
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_Records_DDA:
     [
     Terminal_Sent_ReadRecord( $Terminal, PDOL, <'DDA', furtherData> ),
     !IssuingCA( $Bank, $CA ),
     In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
          <<'04', ~PAN, pubkCard, $Bank, CVM, 'DDA', furtherData>, sign3>, CVM>
     ),
     !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ) ]->
     [
     Terminal_Ready_For_DDA( $Terminal, ~PAN, $Bank, $CA, PDOL,
                             <'DDA', furtherData>, pubkBank, pubkCard, CVM
     )
     ]
    variants (modulo AC)
    1. $Bank = $Bank.36
       $CA   = $CA.37
       ~PAN  = ~PAN.39
       CVM   = CVM.40
       furtherData
             = furtherData.43
       pubkBank
             = pubkBank.44
       pubkCA
             = pubkCA.45
       pubkCard
             = pubkCard.46
       sign1 = sign1.47
       sign2 = sign2.48
       sign3 = sign3.49
       z     = verify(sign1.47, <'01', $CA.37, pubkCA.45, $CA.37>, pubkCA.45)
       z.1   = verify(sign2.48, <'02', $Bank.36, pubkBank.44, $CA.37>,
                      pubkCA.45)
       z.2   = verify(sign3.49,
                      <'04', ~PAN.39, pubkCard.46, $Bank.36, CVM.40, 'DDA', furtherData.43>,
                      pubkBank.44)
    
    2. $Bank = $Bank.94
       $CA   = $CA.95
       ~PAN  = ~PAN.97
       CVM   = CVM.98
       furtherData
             = furtherData.101
       pubkBank
             = pubkBank.102
       pubkCA
             = pk(x.186)
       pubkCard
             = pubkCard.104
       sign1 = sign(<'01', $CA.95, pk(x.186), $CA.95>, x.186)
       sign2 = sign2.106
       sign3 = sign3.107
       z     = true
       z.1   = verify(sign2.106, <'02', $Bank.94, pubkBank.102, $CA.95>,
                      pk(x.186))
       z.2   = verify(sign3.107,
                      <'04', ~PAN.97, pubkCard.104, $Bank.94, CVM.98, 'DDA', furtherData.101>,
                      pubkBank.102)
    
    3. $Bank = $Bank.94
       $CA   = $CA.95
       ~PAN  = ~PAN.97
       CVM   = CVM.98
       furtherData
             = furtherData.101
       pubkBank
             = pk(x.186)
       pubkCA
             = pubkCA.103
       pubkCard
             = pubkCard.104
       sign1 = sign1.105
       sign2 = sign2.106
       sign3 = sign(<'04', ~PAN.97, pubkCard.104, $Bank.94, CVM.98, 'DDA', 
                     furtherData.101>,
                    x.186)
       z     = verify(sign1.105, <'01', $CA.95, pubkCA.103, $CA.95>, pubkCA.103)
       z.1   = verify(sign2.106, <'02', $Bank.94, pk(x.186), $CA.95>,
                      pubkCA.103)
       z.2   = true
    
    4. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pubkBank.103
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign1.106
       sign2 = sign(<'02', $Bank.95, pubkBank.103, $CA.96>, x.188)
       sign3 = sign3.108
       z     = verify(sign1.106, <'01', $CA.96, pk(x.188), $CA.96>, pk(x.188))
       z.1   = true
       z.2   = verify(sign3.108,
                      <'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'DDA', furtherData.102>,
                      pubkBank.103)
    
    5. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pubkBank.103
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign(<'02', $Bank.95, pubkBank.103, $CA.96>, x.188)
       sign3 = sign3.108
       z     = true
       z.1   = true
       z.2   = verify(sign3.108,
                      <'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'DDA', furtherData.102>,
                      pubkBank.103)
    
    6. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign1.106
       sign2 = sign(<'02', $Bank.95, pk(x.187), $CA.96>, x.188)
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'DDA', 
                     furtherData.102>,
                    x.187)
       z     = verify(sign1.106, <'01', $CA.96, pk(x.188), $CA.96>, pk(x.188))
       z.1   = true
       z.2   = true
    
    7. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign2.107
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'DDA', 
                     furtherData.102>,
                    x.187)
       z     = true
       z.1   = verify(sign2.107, <'02', $Bank.95, pk(x.187), $CA.96>, pk(x.188))
       z.2   = true
    
    8. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign(<'02', $Bank.95, pk(x.187), $CA.96>, x.188)
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'DDA', 
                     furtherData.102>,
                    x.187)
       z     = true
       z.1   = true
       z.2   = true
  */

rule (modulo E) Terminal_Sends_InternalAuthenticate:
   [
   Terminal_Ready_For_DDA( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                           CVM
   )
   ]
  -->
   [
   Out( <'INTERNAL_AUTHENTICATE', ~UN> ),
   Terminal_Sent_InternalAuthenticate( $Terminal, ~PAN, $Bank, $CA,
                                       <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                                       CVM
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_InternalAuthenticate:
   [
   Card_Ready_For_DDA( ~PAN, PDOL, ATC ), Fr( ~nc ),
   !LtkCard( ~PAN, ~privkCard ), In( <'INTERNAL_AUTHENTICATE', DDOL> )
   ]
  -->
   [
   Out( <~nc, sign(<'05', ~nc, DDOL>, ~privkCard)> ),
   Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_InternalAuthenticate_Response:
   [
   Terminal_Sent_InternalAuthenticate( $Terminal, ~PAN, $Bank, $CA,
                                       <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                                       CVM
   ),
   In( <nc, SDAD> )
   ]
  --[ Eq( verify(SDAD, <'05', nc, ~UN>, pubkCard), true ) ]->
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                           CVM
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_InternalAuthenticate_Response:
     [
     Terminal_Sent_InternalAuthenticate( $Terminal, ~PAN, $Bank, $CA,
                                         <$amount, country, currency, date, type, ~UN>, AIP, pubkBank,
                                         pubkCard, CVM
     ),
     In( <nc, SDAD> )
     ]
    --[ Eq( z, true ) ]->
     [
     Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                             <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                             CVM
     )
     ]
    variants (modulo AC)
    1. ~UN   = ~UN.18
       SDAD  = SDAD.18
       nc    = nc.18
       pubkCard
             = pubkCard.18
       z     = verify(SDAD.18, <'05', nc.18, ~UN.18>, pubkCard.18)
    
    2. ~UN   = ~x.18
       SDAD  = sign(<'05', x.21, ~x.18>, x.22)
       nc    = x.21
       pubkCard
             = pk(x.22)
       z     = true
  */

rule (modulo E) Terminal_Processes_CVM_NoPIN:
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                           CVM
   ),
   !Value( $amount, 'Low' )
   ]
  -->
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA,
                                  <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                                  'NoPIN', 'Null', CVM
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Processes_CVM_OnlinePIN:
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                           'OnlinePIN'
   ),
   !Entered_PIN( ~PAN, PIN ), !Value( $amount, 'High' )
   ]
  -->
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA,
                                  <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                                  'OnlinePIN', aenc(PIN, pubkBank), 'OnlinePIN'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Processes_CVM_ODCVM:
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>,
                           <auth, 'ODCVM', furtherData2>, pubkBank, pubkCard, CVM
   ),
   !Value( $amount, 'High' )
   ]
  -->
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA,
                                  <$amount, country, currency, date, type, ~UN>,
                                  <auth, 'ODCVM', furtherData2>, pubkBank, pubkCard, 'ODCVM', 'Null', CVM
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_GenerateAC_NoCDA:
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                                  pubkBank, pubkCard, CVM, encPIN, supportedCVM
   ),
   In( acType )
   ]
  --[ NEq( fst(AIP), 'CDA' ) ]->
   [
   Out( <'GENERATE_AC', acType, 'NoCDA', 'TVR', CVM, 'HHMMSS'> ),
   Terminal_Sent_GenerateAC_NoCDA( $Terminal, ~PAN, $Bank, $CA,
                                   <PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, pubkBank, pubkCard, CVM, encPIN,
                                   acType, supportedCVM
   )
   ]

  /*
  rule (modulo AC) Terminal_Sends_GenerateAC_NoCDA:
     [
     Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                                    pubkBank, pubkCard, CVM, encPIN, supportedCVM
     ),
     In( acType )
     ]
    --[ NEq( z, 'CDA' ) ]->
     [
     Out( <'GENERATE_AC', acType, 'NoCDA', 'TVR', CVM, 'HHMMSS'> ),
     Terminal_Sent_GenerateAC_NoCDA( $Terminal, ~PAN, $Bank, $CA,
                                     <PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, pubkBank, pubkCard, CVM, encPIN,
                                     acType, supportedCVM
     )
     ]
    variants (modulo AC)
    1. AIP   = AIP.19
       z     = fst(AIP.19)
    
    2. AIP   = <z.28, x.38>
       z     = z.28
  */

rule (modulo E) Terminal_Sends_GenerateAC_CDA:
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL,
                                  <'CDA', furtherData>, pubkBank, pubkCard, CVM, encPIN, supportedCVM
   ),
   In( acType )
   ]
  -->
   [
   Out( <'GENERATE_AC', acType, 'CDA', 'TVR', CVM, 'HHMMSS'> ),
   Terminal_Sent_GenerateAC_CDA( $Terminal, ~PAN, $Bank, $CA,
                                 <PDOL, 'TVR', CVM, 'HHMMSS'>, <'CDA', furtherData>, pubkBank, pubkCard,
                                 CVM, encPIN, acType, supportedCVM
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GenerateAC_NoCDA:
   [
   Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC ), !AIP( ~PAN, AIP ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank ),
   In( <'GENERATE_AC', CID, 'NoCDA', 'TVR', CVM, 'HHMMSS'> )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, AIP, CVM, <PDOL, 'TVR', CVM, 'HHMMSS'>, ATC, 
            MAC(f(~MK, ATC), <<PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, ATC, 'IAD', CID>), 
            'IAD', CID>
  ),
  Running( ~PAN, $Bank,
           <'Card', 'Bank', ~PAN, AIP, CVM, <PDOL, 'TVR', CVM, 'HHMMSS'>, ATC, 
            MAC(f(~MK, ATC), <<PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, ATC, 'IAD', CID>), 
            'IAD', CID>
  )
  ]->
   [
   Out( <CID, ATC, 
         MAC(f(~MK, ATC), <<PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, ATC, 'IAD', CID>), 
         'IAD', CID>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GenerateAC_CDA:
   [
   Card_Ready_For_Cryptogram( ~PAN,
                              <amount, country, currency, date, type, UN>, ATC
   ),
   !LtkCard( ~PAN, ~privkCard ), !AIP( ~PAN, <'CDA', furtherData> ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank ), Fr( ~nc ),
   In( <'GENERATE_AC', CID, 'CDA', 'TVR', CVM, 'HHMMSS'> )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, <'CDA', furtherData>, CVM, 
            <<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
            ATC, 
            MAC(f(~MK, ATC),
                <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                 <'CDA', furtherData>, ATC, 'IAD', CID>), 
            'IAD', CID>
  ),
  Running( ~PAN, $Bank,
           <'Card', 'Bank', ~PAN, <'CDA', furtherData>, CVM, 
            <<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
            ATC, 
            MAC(f(~MK, ATC),
                <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                 <'CDA', furtherData>, ATC, 'IAD', CID>), 
            'IAD', CID>
  )
  ]->
   [
   Out( <CID, ATC, 
         MAC(f(~MK, ATC),
             <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
              <'CDA', furtherData>, ATC, 'IAD', CID>), 
         <~nc, 
          sign(<'05', ~nc, CID, 
                MAC(f(~MK, ATC),
                    <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                     <'CDA', furtherData>, ATC, 'IAD', CID>), 
                h(<<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                   CID, ATC, 
                   MAC(f(~MK, ATC),
                       <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                        <'CDA', furtherData>, ATC, 'IAD', CID>), 
                   'IAD', CID>), 
                UN>,
               ~privkCard)
         >, 
         'IAD', CID>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_AC_NoCDA:
   [
   Terminal_Sent_GenerateAC_NoCDA( $Terminal, ~PAN, $Bank, $CA,
                                   <PDOL, CDOL1>, AIP, pubkBank, pubkCard, CVM, encPIN, acType, supportedCVM
   ),
   In( <CID, ATC, AC, IAD> ), Fr( ~channelID )
   ]
  --[
  Compatible_CID_acType( CID, acType ), Compatible_CID_CVM( CID, CVM ),
  Running( $Terminal, $Bank,
           <'Terminal', 'Bank', ~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, AC, IAD>
  )
  ]->
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, 'Null', CID,
                         <~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, AC, IAD>, supportedCVM, ~channelID
   ),
   Send( $Terminal, $Bank, <~channelID, 'Mastercard', '1'>,
         <<~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, AC, IAD>, encPIN>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_AC_CDA:
   [
   Terminal_Sent_GenerateAC_CDA( $Terminal, ~PAN, $Bank, $CA,
                                 <<$amount, country, currency, date, type, ~UN>, CDOL1>, AIP, pubkBank,
                                 pubkCard, CVM, encPIN, acType, supportedCVM
   ),
   In( <CID, ATC, AC, <nc, SDAD>, IAD> ), Fr( ~channelID )
   ]
  --[
  Compatible_CID_acType( CID, acType ), Compatible_CID_CVM( CID, CVM ),
  Eq( verify(SDAD,
             <'05', nc, CID, AC, 
              h(<<<$amount, country, currency, date, type, ~UN>, CDOL1>, CID, ATC, AC, 
                 IAD>), 
              ~UN>,
             pubkCard),
      true
  ),
  Running( $Terminal, $Bank,
           <'Terminal', 'Bank', ~PAN, AIP, CVM, 
            <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>
  )
  ]->
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, nc, CID,
                         <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
                          ATC, AC, IAD>,
                         supportedCVM, ~channelID
   ),
   Send( $Terminal, $Bank, <~channelID, 'Mastercard', '1'>,
         <
          <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
           ATC, AC, IAD>, 
          encPIN>
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_AC_CDA:
     [
     Terminal_Sent_GenerateAC_CDA( $Terminal, ~PAN, $Bank, $CA,
                                   <<$amount, country, currency, date, type, ~UN>, CDOL1>, AIP, pubkBank,
                                   pubkCard, CVM, encPIN, acType, supportedCVM
     ),
     In( <CID, ATC, AC, <nc, SDAD>, IAD> ), Fr( ~channelID )
     ]
    --[
    Compatible_CID_acType( CID, acType ), Compatible_CID_CVM( CID, CVM ),
    Eq( z, true ),
    Running( $Terminal, $Bank,
             <'Terminal', 'Bank', ~PAN, AIP, CVM, 
              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>
    )
    ]->
     [
     Terminal_Received_AC( $Terminal, $Bank, $CA, nc, CID,
                           <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
                            ATC, AC, IAD>,
                           supportedCVM, ~channelID
     ),
     Send( $Terminal, $Bank, <~channelID, 'Mastercard', '1'>,
           <
            <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
             ATC, AC, IAD>, 
            encPIN>
     )
     ]
    variants (modulo AC)
    1. $amount
             = $amount.51
       ~UN   = ~UN.53
       AC    = AC.55
       ATC   = ATC.57
       CDOL1 = CDOL1.58
       CID   = CID.59
       IAD   = IAD.61
       SDAD  = SDAD.62
       country
             = country.64
       currency
             = currency.65
       date  = date.66
       nc    = nc.68
       pubkCard
             = pubkCard.70
       type  = type.72
       z     = verify(SDAD.62,
                      <'05', nc.68, CID.59, AC.55, 
                       h(<
                          <<$amount.51, country.64, currency.65, date.66, type.72, ~UN.53>, 
                           CDOL1.58>, 
                          CID.59, ATC.57, AC.55, IAD.61>), 
                       ~UN.53>,
                      pubkCard.70)
    
    2. $amount
             = $amount.127
       ~UN   = ~UN.129
       AC    = AC.131
       ATC   = ATC.133
       CDOL1 = CDOL1.134
       CID   = CID.135
       IAD   = IAD.137
       SDAD  = sign(<'05', nc.144, CID.135, AC.131, 
                     h(<
                        <<$amount.127, country.140, currency.141, date.142, type.148, ~UN.129>, 
                         CDOL1.134>, 
                        CID.135, ATC.133, AC.131, IAD.137>), 
                     ~UN.129>,
                    x.249)
       country
             = country.140
       currency
             = currency.141
       date  = date.142
       nc    = nc.144
       pubkCard
             = pk(x.249)
       type  = type.148
       z     = true
  */

rule (modulo E) Terminal_Commits_TC:
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                         <~PAN, <'SDA', furtherData>, CVM, 
                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                         'OnlinePIN', ~channelID
   ),
   !Value( $amount, 'High' )
   ]
  --[
  TerminalAccepts( <~PAN, <'SDA', furtherData>, CVM, 
                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>
  ),
  Commit( 'Terminal', ~PAN,
          <'Card', 'Terminal', ~PAN, <'SDA', furtherData>, CVM, 
           <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>
  ),
  Honest( $CA ), Honest( $Bank ), Honest( $Terminal ), Honest( ~PAN )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Receives_AC:
   [
   Recv( $Terminal, $Bank, <channelID, 'Mastercard', '1'>,
         <<~PAN, AIP, CVM, X, ATC, MAC(f(~MK, ATC), <X, AIP, ATC, IAD>), IAD>, 
          encPIN>
   ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank )
   ]
  --[ Once( <~PAN, ATC, 'Bank'> ) ]->
   [
   Bank_Checked_AC( $Bank, $Terminal,
                    <~PAN, AIP, CVM, X, ATC, MAC(f(~MK, ATC), <X, AIP, ATC, IAD>), IAD>,
                    encPIN, channelID,
                    MAC_arpc(f(~MK, ATC), (MAC(f(~MK, ATC), <X, AIP, ATC, IAD>)⊕p8('ARC')))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Receives_AC_Failed:
   [
   Recv( $Terminal, $Bank, <channelID, 'Mastercard', '1'>,
         <<~PAN, AIP, CVM, X, ATC, AC, IAD>, encPIN>
   ),
   !Shk( ~PAN, ~MK )
   ]
  --[
  NEq( MAC(f(~MK, ATC), <X, AIP, ATC, IAD>), AC ),
  BankDeclines( <~PAN, AIP, CVM, X, ATC, AC, IAD> )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Processes_CVM_NotOnlinePIN:
   [
   Bank_Checked_AC( $Bank, $Terminal, <~PAN, AIP, CVM, X, ATC, AC, IAD>,
                    'Null', channelID, ARPC
   )
   ]
  --[
  NEq( CVM, 'OnlinePIN' ),
  Running( $Bank, $Terminal,
           <'Bank', 'Terminal', ~PAN, AIP, CVM, X, ATC, AC, IAD>
  )
  ]->
   [
   Bank_Commits( $Bank, $Terminal, <~PAN, AIP, CVM, X, ATC, AC, IAD>,
                 channelID, ARPC
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Commits:
   [
   Bank_Commits( $Bank, $Terminal,
                 <~PAN, <'SDA', furtherData>, CVM, 
                  <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                 channelID, ARPC
   ),
   !Value( amount, 'High' ), !IssuingCA( $Bank, $CA )
   ]
  --[
  Commit( $Bank, ~PAN,
          <'Card', 'Bank', ~PAN, <'SDA', furtherData>, CVM, 
           <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
  ),
  Commit( $Bank, $Terminal,
          <'Terminal', 'Bank', ~PAN, <'SDA', furtherData>, CVM, 
           <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
  ),
  Honest( $CA ), Honest( $Bank ), Honest( $Terminal ), Honest( ~PAN )
  ]->
   [ Send( $Bank, $Terminal, <channelID, 'Mastercard', '2'>, <'ARC', ARPC> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Processes_CVM_OnlinePIN:
   [
   Bank_Checked_AC( $Bank, $Terminal,
                    <~PAN, AIP, 'OnlinePIN', X, ATC, AC, IAD>, aenc(PIN, pk(~privkBank)),
                    channelID, ARPC
   ),
   !LtkBank( $Bank, ~privkBank ), !PIN( ~PAN, PIN ), !Shk( ~PAN, ~MK )
   ]
  --[
  Running( $Bank, $Terminal,
           <'Bank', 'Terminal', ~PAN, AIP, 'OnlinePIN', X, ATC, AC, IAD>
  )
  ]->
   [
   Bank_Commits( $Bank, $Terminal,
                 <~PAN, AIP, 'OnlinePIN', X, ATC, AC, IAD>, channelID, ARPC
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Commits_ARQC:
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                         <~PAN, <'SDA', furtherData>, CVM, 
                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                         'OnlinePIN', ~channelID
   ),
   !Value( $amount, 'High' ),
   Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>, <'ARC', ARPC> )
   ]
  --[
  TerminalAccepts( <~PAN, <'SDA', furtherData>, CVM, 
                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>
  ),
  Commit( 'Terminal', ~PAN,
          <'Card', 'Terminal', ~PAN, <'SDA', furtherData>, CVM, 
           <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>
  ),
  Commit( $Terminal, $Bank,
          <'Bank', 'Terminal', ~PAN, <'SDA', furtherData>, CVM, 
           <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>
  ),
  Honest( $CA ), Honest( $Bank ), Honest( $Terminal ), Honest( ~PAN )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_Card_Visa:
   [
   Fr( ~PAN ), Fr( ~expDate ), Fr( ~privkCard ), Fr( ~MK ),
   !LtkBank( $Bank, ~privkBank ), !CertBank( $Bank, certBank ),
   !IssuingCA( $Bank, $CA )
   ]
  --[
  Role( ~PAN, 'Card' ), SecretPAN( ~PAN ), SecretMK( ~MK ),
  SecretPrivkCard( ~privkCard ), Honest( $CA ), Honest( $Bank ),
  Honest( ~PAN )
  ]->
   [
   !LtkCard( ~PAN, ~privkCard ), !AID( ~PAN, 'Visa' ),
   Out( pk(~privkCard) ), !ExpirationDate( ~PAN, ~expDate ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank ),
   !Records_Visa( ~PAN, ~expDate, $CA, certBank,
                  <<'04', ~PAN, pk(~privkCard), $Bank>, 
                   sign(<'04', ~PAN, pk(~privkCard), $Bank>, ~privkBank)>
   ),
   Set_PIN( ~PAN, 'OnlinePIN', $CA, $Bank )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_GPO_Low_Visa:
   [ Fr( ~UN ), !Value( $amount, 'Low' ) ]
  --[ OneTerminal( ), Role( $Terminal, 'Terminal' ) ]->
   [
   Out( <'GET_PROCESSING_OPTIONS', <'TC', 'NoPIN'>, $amount, 'Switzerland', 
         'CHF', 'YYMMDD', 'Purchase', ~UN>
   ),
   Terminal_Sent_GPO_Visa( $Terminal,
                           <<'TC', 'NoPIN'>, $amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                            ~UN>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_GPO_High_Visa:
   [ Fr( ~UN ), !Value( $amount, 'High' ) ]
  --[ OneTerminal( ), Role( $Terminal, 'Terminal' ) ]->
   [
   Out( <'GET_PROCESSING_OPTIONS', <'ARQC', 'OnlinePIN'>, $amount, 
         'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>
   ),
   Terminal_Sent_GPO_Visa( $Terminal,
                           <<'ARQC', 'OnlinePIN'>, $amount, 'Switzerland', 'CHF', 'YYMMDD', 
                            'Purchase', ~UN>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GPO_EMV_Visa:
   [
   In( <'GET_PROCESSING_OPTIONS', <acType, CVM>, amount, country, currency, 
        date, type, UN>
   ),
   !Shk( ~PAN, ~MK ), !AID( ~PAN, 'Visa' ),
   !ExpirationDate( ~PAN, ~expDate ), !IssuingBank( ~PAN, $Bank ),
   !ATC( ATC )
   ]
  --[
  OneCard( ), Once( <~PAN, ATC, 'Card'> ), NEq( CVM, 'CDCVM' ),
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, <'EMV', $furtherData>, CVM, 
            <<acType, CVM>, amount, country, currency, date, type, UN>, ATC, 
            MAC(f(~MK, ATC),
                <<<acType, CVM>, amount, country, currency, date, type, UN>, 
                 <'EMV', $furtherData>, ATC, 'IAD', 'ARQC'>), 
            'IAD', 'ARQC'>
  ),
  Running( ~PAN, $Bank,
           <'Card', 'Bank', ~PAN, <'EMV', $furtherData>, CVM, 
            <<acType, CVM>, amount, country, currency, date, type, UN>, ATC, 
            MAC(f(~MK, ATC),
                <<<acType, CVM>, amount, country, currency, date, type, UN>, 
                 <'EMV', $furtherData>, ATC, 'IAD', 'ARQC'>), 
            'IAD', 'ARQC'>
  )
  ]->
   [
   Out( <<'EMV', $furtherData>, 'AFL', <~PAN, ~expDate>, <'IAD', 'ARQC'>, 
         MAC(f(~MK, ATC),
             <<<acType, CVM>, amount, country, currency, date, type, UN>, 
              <'EMV', $furtherData>, ATC, 'IAD', 'ARQC'>), 
         'ARQC', ATC, CVM>
   ),
   Card_Responded_To_GPO_Visa( ~PAN, <'EMV', $furtherData>,
                               <<acType, CVM>, amount, country, currency, date, type, UN>, ATC,
                               MAC(f(~MK, ATC),
                                   <<<acType, CVM>, amount, country, currency, date, type, UN>, 
                                    <'EMV', $furtherData>, ATC, 'IAD', 'ARQC'>),
                               'ARQC', CVM, <'IAD', 'ARQC'>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GPO_DDA_Visa:
   [
   In( <'GET_PROCESSING_OPTIONS', <CID, CVM>, amount, country, currency, 
        date, type, UN>
   ),
   !Shk( ~PAN, ~MK ), !AID( ~PAN, 'Visa' ),
   !ExpirationDate( ~PAN, ~expDate ), !ATC( ATC )
   ]
  --[ OneCard( ), Once( <~PAN, ATC, 'Card'> ), NEq( CVM, 'CDCVM' ) ]->
   [
   Out( <<'DDA', $furtherData>, 'AFL', <~PAN, ~expDate>, <'IAD', CID>, 
         MAC(f(~MK, ATC),
             <<<CID, CVM>, amount, country, currency, date, type, UN>, 
              <'DDA', $furtherData>, ATC, 'IAD', CID>), 
         CID, ATC, CVM>
   ),
   Card_Responded_To_GPO_Visa( ~PAN, <'DDA', $furtherData>,
                               <<CID, CVM>, amount, country, currency, date, type, UN>, ATC,
                               MAC(f(~MK, ATC),
                                   <<<CID, CVM>, amount, country, currency, date, type, UN>, 
                                    <'DDA', $furtherData>, ATC, 'IAD', CID>),
                               CID, CVM, <'IAD', CID>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_ReadRecord_Visa:
   [
   Terminal_Sent_GPO_Visa( $Terminal,
                           <<acType, CVM>, $amount, country, currency, date, type, ~UN>
   ),
   In( <AIP, 'AFL', <~PAN, expDate>, IAD, AC, CID, ATC, CTQ> )
   ]
  --[ Compatible_CID_acType( CID, acType ) ]->
   [
   Out( <'READ_RECORD', 'AFL'> ),
   Terminal_Sent_ReadRecord_Visa( $Terminal,
                                  <<acType, CVM>, $amount, country, currency, date, type, ~UN>, AIP, ~PAN,
                                  expDate, IAD, AC, CID, ATC, CTQ
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_ReadRecord_EMV_Visa:
   [
   Card_Responded_To_GPO_Visa( ~PAN, <'EMV', furtherData>, PDOL, ATC, AC,
                               CID, CTQ, IAD
   ),
   !Records_Visa( ~PAN, ~expDate, $CA, certBank, certCard ),
   In( <'READ_RECORD', 'AFL'> )
   ]
  -->
   [ Out( <~PAN, ~expDate> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_ReadRecord_DDA_Visa:
   [
   Card_Responded_To_GPO_Visa( ~PAN, <'DDA', furtherData>,
                               <TTQ, amount, country, currency, date, type, UN>, ATC, AC, CID, CTQ, IAD
   ),
   !Records_Visa( ~PAN, ~expDate, $CA, certBank, certCard ), Fr( ~nc ),
   !LtkCard( ~PAN, ~privkCard ), !SDADFormat( format, CID ),
   !IssuingBank( ~PAN, $Bank ), In( <'READ_RECORD', 'AFL'> )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, <'DDA', furtherData>, CTQ, 
            <TTQ, amount, country, currency, date, type, UN>, ATC, AC, IAD>
  ),
  Running( ~PAN, $Bank,
           <'Card', 'Bank', ~PAN, <'DDA', furtherData>, CTQ, 
            <TTQ, amount, country, currency, date, type, UN>, ATC, AC, IAD>
  )
  ]->
   [
   Out( <~PAN, ~expDate, $CA, certBank, certCard, ~nc, CTQ, 
         sign(<format, ATC, UN, amount, 'CHF', ~nc, CTQ, 'DDA', furtherData>,
              ~privkCard)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_Records_EMV_Visa:
   [
   Terminal_Sent_ReadRecord_Visa( $Terminal, PDOL, <'EMV', furtherData>,
                                  ~PAN, expDate, IAD, AC, 'ARQC', ATC, CTQ
   ),
   In( <~PAN, expDate> ), !IssuingBank( ~PAN, $Bank ),
   !CertBank( $Bank, <<'02', $Bank, pubkBank, $CA>, sign2> )
   ]
  -->
   [
   Terminal_Ready_For_CVM_Visa( $Terminal, ~PAN, PDOL, <'EMV', furtherData>,
                                $CA, $Bank, pubkBank, 'Null', IAD, AC, 'ARQC', ATC, CTQ
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_Records_DDA_Visa:
   [
   Terminal_Sent_ReadRecord_Visa( $Terminal,
                                  <TTQ, $amount, country, currency, date, type, ~UN>, <'DDA', furtherData>,
                                  ~PAN, expDate, IAD, AC, CID, ATC, CTQ
   ),
   In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
        <<'04', ~PAN, pubkCard, $Bank>, sign3>, nc, CTQ, SDAD>
   ),
   !IssuingCA( $Bank, $CA ), !SDADFormat( format, CID ),
   !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
   ]
  --[
  Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
  Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
  Eq( verify(sign3, <'04', ~PAN, pubkCard, $Bank>, pubkBank), true ),
  Eq( verify(SDAD,
             <format, ATC, ~UN, $amount, 'CHF', nc, CTQ, 'DDA', furtherData>,
             pubkCard),
      true
  )
  ]->
   [
   Terminal_Ready_For_CVM_Visa( $Terminal, ~PAN,
                                <TTQ, $amount, country, currency, date, type, ~UN>, <'DDA', furtherData>,
                                $CA, $Bank, pubkBank, nc, IAD, AC, CID, ATC, CTQ
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_Records_DDA_Visa:
     [
     Terminal_Sent_ReadRecord_Visa( $Terminal,
                                    <TTQ, $amount, country, currency, date, type, ~UN>, <'DDA', furtherData>,
                                    ~PAN, expDate, IAD, AC, CID, ATC, CTQ
     ),
     In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
          <<'04', ~PAN, pubkCard, $Bank>, sign3>, nc, CTQ, SDAD>
     ),
     !IssuingCA( $Bank, $CA ), !SDADFormat( format, CID ),
     !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ), Eq( z.3, true ) ]->
     [
     Terminal_Ready_For_CVM_Visa( $Terminal, ~PAN,
                                  <TTQ, $amount, country, currency, date, type, ~UN>, <'DDA', furtherData>,
                                  $CA, $Bank, pubkBank, nc, IAD, AC, CID, ATC, CTQ
     )
     ]
    variants (modulo AC)
     1. $Bank = $Bank.62
        $CA   = $CA.63
        $amount
              = $amount.65
        ~PAN  = ~PAN.66
        ~UN   = ~UN.67
        ATC   = ATC.69
        CTQ   = CTQ.71
        SDAD  = SDAD.73
        format
              = format.79
        furtherData
              = furtherData.80
        nc    = nc.81
        pubkBank
              = pubkBank.82
        pubkCA
              = pubkCA.83
        pubkCard
              = pubkCard.84
        sign1 = sign1.85
        sign2 = sign2.86
        sign3 = sign3.87
        z     = verify(sign1.85, <'01', $CA.63, pubkCA.83, $CA.63>, pubkCA.83)
        z.1   = verify(sign2.86, <'02', $Bank.62, pubkBank.82, $CA.63>,
                       pubkCA.83)
        z.2   = verify(sign3.87, <'04', ~PAN.66, pubkCard.84, $Bank.62>,
                       pubkBank.82)
        z.3   = verify(SDAD.73,
                       <format.79, ATC.69, ~UN.67, $amount.65, 'CHF', nc.81, CTQ.71, 'DDA', 
                        furtherData.80>,
                       pubkCard.84)
    
     2. $Bank = $Bank.153
        $CA   = $CA.154
        $amount
              = $amount.156
        ~PAN  = ~PAN.157
        ~UN   = ~UN.158
        ATC   = ATC.160
        CTQ   = CTQ.162
        SDAD  = sign(<format.170, ATC.160, ~UN.158, $amount.156, 'CHF', nc.172, 
                      CTQ.162, 'DDA', furtherData.171>,
                     x.304)
        format
              = format.170
        furtherData
              = furtherData.171
        nc    = nc.172
        pubkBank
              = pubkBank.173
        pubkCA
              = pubkCA.174
        pubkCard
              = pk(x.304)
        sign1 = sign1.176
        sign2 = sign2.177
        sign3 = sign3.178
        z     = verify(sign1.176, <'01', $CA.154, pubkCA.174, $CA.154>,
                       pubkCA.174)
        z.1   = verify(sign2.177, <'02', $Bank.153, pubkBank.173, $CA.154>,
                       pubkCA.174)
        z.2   = verify(sign3.178, <'04', ~PAN.157, pk(x.304), $Bank.153>,
                       pubkBank.173)
        z.3   = true
    
     3. $Bank = $Bank.162
        $CA   = $CA.163
        $amount
              = $amount.165
        ~PAN  = ~PAN.166
        ~UN   = ~UN.167
        ATC   = ATC.169
        CTQ   = CTQ.171
        SDAD  = SDAD.173
        format
              = format.179
        furtherData
              = furtherData.180
        nc    = nc.181
        pubkBank
              = pubkBank.182
        pubkCA
              = pk(x.322)
        pubkCard
              = pubkCard.184
        sign1 = sign(<'01', $CA.163, pk(x.322), $CA.163>, x.322)
        sign2 = sign2.186
        sign3 = sign3.187
        z     = true
        z.1   = verify(sign2.186, <'02', $Bank.162, pubkBank.182, $CA.163>,
                       pk(x.322))
        z.2   = verify(sign3.187, <'04', ~PAN.166, pubkCard.184, $Bank.162>,
                       pubkBank.182)
        z.3   = verify(SDAD.173,
                       <format.179, ATC.169, ~UN.167, $amount.165, 'CHF', nc.181, CTQ.171, 
                        'DDA', furtherData.180>,
                       pubkCard.184)
    
     4. $Bank = $Bank.162
        $CA   = $CA.163
        $amount
              = $amount.165
        ~PAN  = ~PAN.166
        ~UN   = ~UN.167
        ATC   = ATC.169
        CTQ   = CTQ.171
        SDAD  = SDAD.173
        format
              = format.179
        furtherData
              = furtherData.180
        nc    = nc.181
        pubkBank
              = pk(x.322)
        pubkCA
              = pubkCA.183
        pubkCard
              = pubkCard.184
        sign1 = sign1.185
        sign2 = sign2.186
        sign3 = sign(<'04', ~PAN.166, pubkCard.184, $Bank.162>, x.322)
        z     = verify(sign1.185, <'01', $CA.163, pubkCA.183, $CA.163>,
                       pubkCA.183)
        z.1   = verify(sign2.186, <'02', $Bank.162, pk(x.322), $CA.163>,
                       pubkCA.183)
        z.2   = true
        z.3   = verify(SDAD.173,
                       <format.179, ATC.169, ~UN.167, $amount.165, 'CHF', nc.181, CTQ.171, 
                        'DDA', furtherData.180>,
                       pubkCard.184)
    
     5. $Bank = $Bank.162
        $CA   = $CA.163
        $amount
              = $amount.165
        ~PAN  = ~PAN.166
        ~UN   = ~UN.167
        ATC   = ATC.169
        CTQ   = CTQ.171
        SDAD  = sign(<format.179, ATC.169, ~UN.167, $amount.165, 'CHF', nc.181, 
                      CTQ.171, 'DDA', furtherData.180>,
                     x.315)
        format
              = format.179
        furtherData
              = furtherData.180
        nc    = nc.181
        pubkBank
              = pubkBank.182
        pubkCA
              = pk(x.322)
        pubkCard
              = pk(x.315)
        sign1 = sign(<'01', $CA.163, pk(x.322), $CA.163>, x.322)
        sign2 = sign2.186
        sign3 = sign3.187
        z     = true
        z.1   = verify(sign2.186, <'02', $Bank.162, pubkBank.182, $CA.163>,
                       pk(x.322))
        z.2   = verify(sign3.187, <'04', ~PAN.166, pk(x.315), $Bank.162>,
                       pubkBank.182)
        z.3   = true
    
     6. $Bank = $Bank.162
        $CA   = $CA.163
        $amount
              = $amount.165
        ~PAN  = ~PAN.166
        ~UN   = ~UN.167
        ATC   = ATC.169
        CTQ   = CTQ.171
        SDAD  = sign(<format.179, ATC.169, ~UN.167, $amount.165, 'CHF', nc.181, 
                      CTQ.171, 'DDA', furtherData.180>,
                     x.316)
        format
              = format.179
        furtherData
              = furtherData.180
        nc    = nc.181
        pubkBank
              = pk(x.322)
        pubkCA
              = pubkCA.183
        pubkCard
              = pk(x.316)
        sign1 = sign1.185
        sign2 = sign2.186
        sign3 = sign(<'04', ~PAN.166, pk(x.316), $Bank.162>, x.322)
        z     = verify(sign1.185, <'01', $CA.163, pubkCA.183, $CA.163>,
                       pubkCA.183)
        z.1   = verify(sign2.186, <'02', $Bank.162, pk(x.322), $CA.163>,
                       pubkCA.183)
        z.2   = true
        z.3   = true
    
     7. $Bank = $Bank.163
        $CA   = $CA.164
        $amount
              = $amount.166
        ~PAN  = ~PAN.167
        ~UN   = ~UN.168
        ATC   = ATC.170
        CTQ   = CTQ.172
        SDAD  = SDAD.174
        format
              = format.180
        furtherData
              = furtherData.181
        nc    = nc.182
        pubkBank
              = pubkBank.183
        pubkCA
              = pk(x.324)
        pubkCard
              = pubkCard.185
        sign1 = sign1.186
        sign2 = sign(<'02', $Bank.163, pubkBank.183, $CA.164>, x.324)
        sign3 = sign3.188
        z     = verify(sign1.186, <'01', $CA.164, pk(x.324), $CA.164>, pk(x.324))
        z.1   = true
        z.2   = verify(sign3.188, <'04', ~PAN.167, pubkCard.185, $Bank.163>,
                       pubkBank.183)
        z.3   = verify(SDAD.174,
                       <format.180, ATC.170, ~UN.168, $amount.166, 'CHF', nc.182, CTQ.172, 
                        'DDA', furtherData.181>,
                       pubkCard.185)
    
     8. $Bank = $Bank.163
        $CA   = $CA.164
        $amount
              = $amount.166
        ~PAN  = ~PAN.167
        ~UN   = ~UN.168
        ATC   = ATC.170
        CTQ   = CTQ.172
        SDAD  = SDAD.174
        format
              = format.180
        furtherData
              = furtherData.181
        nc    = nc.182
        pubkBank
              = pubkBank.183
        pubkCA
              = pk(x.324)
        pubkCard
              = pubkCard.185
        sign1 = sign(<'01', $CA.164, pk(x.324), $CA.164>, x.324)
        sign2 = sign(<'02', $Bank.163, pubkBank.183, $CA.164>, x.324)
        sign3 = sign3.188
        z     = true
        z.1   = true
        z.2   = verify(sign3.188, <'04', ~PAN.167, pubkCard.185, $Bank.163>,
                       pubkBank.183)
        z.3   = verify(SDAD.174,
                       <format.180, ATC.170, ~UN.168, $amount.166, 'CHF', nc.182, CTQ.172, 
                        'DDA', furtherData.181>,
                       pubkCard.185)
    
     9. $Bank = $Bank.163
        $CA   = $CA.164
        $amount
              = $amount.166
        ~PAN  = ~PAN.167
        ~UN   = ~UN.168
        ATC   = ATC.170
        CTQ   = CTQ.172
        SDAD  = SDAD.174
        format
              = format.180
        furtherData
              = furtherData.181
        nc    = nc.182
        pubkBank
              = pk(x.323)
        pubkCA
              = pk(x.324)
        pubkCard
              = pubkCard.185
        sign1 = sign1.186
        sign2 = sign(<'02', $Bank.163, pk(x.323), $CA.164>, x.324)
        sign3 = sign(<'04', ~PAN.167, pubkCard.185, $Bank.163>, x.323)
        z     = verify(sign1.186, <'01', $CA.164, pk(x.324), $CA.164>, pk(x.324))
        z.1   = true
        z.2   = true
        z.3   = verify(SDAD.174,
                       <format.180, ATC.170, ~UN.168, $amount.166, 'CHF', nc.182, CTQ.172, 
                        'DDA', furtherData.181>,
                       pubkCard.185)
    
    10. $Bank = $Bank.163
        $CA   = $CA.164
        $amount
              = $amount.166
        ~PAN  = ~PAN.167
        ~UN   = ~UN.168
        ATC   = ATC.170
        CTQ   = CTQ.172
        SDAD  = SDAD.174
        format
              = format.180
        furtherData
              = furtherData.181
        nc    = nc.182
        pubkBank
              = pk(x.323)
        pubkCA
              = pk(x.324)
        pubkCard
              = pubkCard.185
        sign1 = sign(<'01', $CA.164, pk(x.324), $CA.164>, x.324)
        sign2 = sign2.187
        sign3 = sign(<'04', ~PAN.167, pubkCard.185, $Bank.163>, x.323)
        z     = true
        z.1   = verify(sign2.187, <'02', $Bank.163, pk(x.323), $CA.164>,
                       pk(x.324))
        z.2   = true
        z.3   = verify(SDAD.174,
                       <format.180, ATC.170, ~UN.168, $amount.166, 'CHF', nc.182, CTQ.172, 
                        'DDA', furtherData.181>,
                       pubkCard.185)
    
    11. $Bank = $Bank.163
        $CA   = $CA.164
        $amount
              = $amount.166
        ~PAN  = ~PAN.167
        ~UN   = ~UN.168
        ATC   = ATC.170
        CTQ   = CTQ.172
        SDAD  = SDAD.174
        format
              = format.180
        furtherData
              = furtherData.181
        nc    = nc.182
        pubkBank
              = pk(x.323)
        pubkCA
              = pk(x.324)
        pubkCard
              = pubkCard.185
        sign1 = sign(<'01', $CA.164, pk(x.324), $CA.164>, x.324)
        sign2 = sign(<'02', $Bank.163, pk(x.323), $CA.164>, x.324)
        sign3 = sign(<'04', ~PAN.167, pubkCard.185, $Bank.163>, x.323)
        z     = true
        z.1   = true
        z.2   = true
        z.3   = verify(SDAD.174,
                       <format.180, ATC.170, ~UN.168, $amount.166, 'CHF', nc.182, CTQ.172, 
                        'DDA', furtherData.181>,
                       pubkCard.185)
    
    12. $Bank = $Bank.163
        $CA   = $CA.164
        $amount
              = $amount.166
        ~PAN  = ~PAN.167
        ~UN   = ~UN.168
        ATC   = ATC.170
        CTQ   = CTQ.172
        SDAD  = sign(<format.180, ATC.170, ~UN.168, $amount.166, 'CHF', nc.182, 
                      CTQ.172, 'DDA', furtherData.181>,
                     x.317)
        format
              = format.180
        furtherData
              = furtherData.181
        nc    = nc.182
        pubkBank
              = pubkBank.183
        pubkCA
              = pk(x.324)
        pubkCard
              = pk(x.317)
        sign1 = sign1.186
        sign2 = sign(<'02', $Bank.163, pubkBank.183, $CA.164>, x.324)
        sign3 = sign3.188
        z     = verify(sign1.186, <'01', $CA.164, pk(x.324), $CA.164>, pk(x.324))
        z.1   = true
        z.2   = verify(sign3.188, <'04', ~PAN.167, pk(x.317), $Bank.163>,
                       pubkBank.183)
        z.3   = true
    
    13. $Bank = $Bank.163
        $CA   = $CA.164
        $amount
              = $amount.166
        ~PAN  = ~PAN.167
        ~UN   = ~UN.168
        ATC   = ATC.170
        CTQ   = CTQ.172
        SDAD  = sign(<format.180, ATC.170, ~UN.168, $amount.166, 'CHF', nc.182, 
                      CTQ.172, 'DDA', furtherData.181>,
                     x.317)
        format
              = format.180
        furtherData
              = furtherData.181
        nc    = nc.182
        pubkBank
              = pubkBank.183
        pubkCA
              = pk(x.324)
        pubkCard
              = pk(x.317)
        sign1 = sign(<'01', $CA.164, pk(x.324), $CA.164>, x.324)
        sign2 = sign(<'02', $Bank.163, pubkBank.183, $CA.164>, x.324)
        sign3 = sign3.188
        z     = true
        z.1   = true
        z.2   = verify(sign3.188, <'04', ~PAN.167, pk(x.317), $Bank.163>,
                       pubkBank.183)
        z.3   = true
    
    14. $Bank = $Bank.163
        $CA   = $CA.164
        $amount
              = $amount.166
        ~PAN  = ~PAN.167
        ~UN   = ~UN.168
        ATC   = ATC.170
        CTQ   = CTQ.172
        SDAD  = sign(<format.180, ATC.170, ~UN.168, $amount.166, 'CHF', nc.182, 
                      CTQ.172, 'DDA', furtherData.181>,
                     x.317)
        format
              = format.180
        furtherData
              = furtherData.181
        nc    = nc.182
        pubkBank
              = pk(x.323)
        pubkCA
              = pk(x.324)
        pubkCard
              = pk(x.317)
        sign1 = sign1.186
        sign2 = sign(<'02', $Bank.163, pk(x.323), $CA.164>, x.324)
        sign3 = sign(<'04', ~PAN.167, pk(x.317), $Bank.163>, x.323)
        z     = verify(sign1.186, <'01', $CA.164, pk(x.324), $CA.164>, pk(x.324))
        z.1   = true
        z.2   = true
        z.3   = true
    
    15. $Bank = $Bank.163
        $CA   = $CA.164
        $amount
              = $amount.166
        ~PAN  = ~PAN.167
        ~UN   = ~UN.168
        ATC   = ATC.170
        CTQ   = CTQ.172
        SDAD  = sign(<format.180, ATC.170, ~UN.168, $amount.166, 'CHF', nc.182, 
                      CTQ.172, 'DDA', furtherData.181>,
                     x.317)
        format
              = format.180
        furtherData
              = furtherData.181
        nc    = nc.182
        pubkBank
              = pk(x.323)
        pubkCA
              = pk(x.324)
        pubkCard
              = pk(x.317)
        sign1 = sign(<'01', $CA.164, pk(x.324), $CA.164>, x.324)
        sign2 = sign2.187
        sign3 = sign(<'04', ~PAN.167, pk(x.317), $Bank.163>, x.323)
        z     = true
        z.1   = verify(sign2.187, <'02', $Bank.163, pk(x.323), $CA.164>,
                       pk(x.324))
        z.2   = true
        z.3   = true
    
    16. $Bank = $Bank.163
        $CA   = $CA.164
        $amount
              = $amount.166
        ~PAN  = ~PAN.167
        ~UN   = ~UN.168
        ATC   = ATC.170
        CTQ   = CTQ.172
        SDAD  = sign(<format.180, ATC.170, ~UN.168, $amount.166, 'CHF', nc.182, 
                      CTQ.172, 'DDA', furtherData.181>,
                     x.317)
        format
              = format.180
        furtherData
              = furtherData.181
        nc    = nc.182
        pubkBank
              = pk(x.323)
        pubkCA
              = pk(x.324)
        pubkCard
              = pk(x.317)
        sign1 = sign(<'01', $CA.164, pk(x.324), $CA.164>, x.324)
        sign2 = sign(<'02', $Bank.163, pk(x.323), $CA.164>, x.324)
        sign3 = sign(<'04', ~PAN.167, pk(x.317), $Bank.163>, x.323)
        z     = true
        z.1   = true
        z.2   = true
        z.3   = true
  */

rule (modulo E) Terminal_Processes_CVM_NoPIN_Visa:
   [
   Terminal_Ready_For_CVM_Visa( $Terminal, ~PAN,
                                <TTQ, $amount, country, currency, date, type, ~UN>, AIP, $CA, $Bank,
                                pubkBank, nc, IAD, AC, CID, ATC, 'NoPIN'
   ),
   !Value( $amount, 'Low' )
   ]
  -->
   [
   Terminal_Ready_To_Send_AC_Visa( $Terminal, ~PAN,
                                   <TTQ, $amount, country, currency, date, type, ~UN>, AIP, $CA, $Bank, nc,
                                   IAD, AC, CID, ATC, 'NoPIN', 'Null'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Processes_CVM_CDCVM_Visa:
   [
   Terminal_Ready_For_CVM_Visa( $Terminal, ~PAN, PDOL, AIP, $CA, $Bank,
                                pubkBank, nc, IAD, AC, 'ARQC', ATC, 'CDCVM'
   )
   ]
  -->
   [
   Terminal_Ready_To_Send_AC_Visa( $Terminal, ~PAN, PDOL, AIP, $CA, $Bank,
                                   nc, IAD, AC, 'ARQC', ATC, 'CDCVM', 'Null'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Processes_CVM_OnlinePIN_Visa:
   [
   Terminal_Ready_For_CVM_Visa( $Terminal, ~PAN,
                                <TTQ, $amount, country, currency, date, type, ~UN>, AIP, $CA, $Bank,
                                pubkBank, nc, IAD, AC, 'ARQC', ATC, 'OnlinePIN'
   ),
   !Entered_PIN( ~PAN, PIN ), !Value( $amount, 'High' )
   ]
  -->
   [
   Terminal_Ready_To_Send_AC_Visa( $Terminal, ~PAN,
                                   <TTQ, $amount, country, currency, date, type, ~UN>, AIP, $CA, $Bank, nc,
                                   IAD, AC, 'ARQC', ATC, 'OnlinePIN', aenc(PIN, pubkBank)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_AC_Visa:
   [
   Terminal_Ready_To_Send_AC_Visa( $Terminal, ~PAN, PDOL, AIP, $CA, $Bank,
                                   nc, IAD, AC, CID, ATC, CVM, encPIN
   ),
   Fr( ~channelID )
   ]
  --[
  Running( $Terminal, $Bank,
           <'Terminal', 'Bank', ~PAN, AIP, CVM, PDOL, ATC, AC, IAD>
  )
  ]->
   [
   Terminal_Received_AC_Visa( $Terminal, $Bank, $CA, nc, CID,
                              <~PAN, AIP, CVM, PDOL, ATC, AC, IAD>, ~channelID
   ),
   Send( $Terminal, $Bank, <~channelID, 'Visa', '1'>,
         <<~PAN, AIP, CVM, PDOL, ATC, AC, IAD>, encPIN>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Receives_AC_Visa:
   [
   Recv( $Terminal, $Bank, <channelID, 'Visa', '1'>,
         <
          <~PAN, AIP, CVM, PDOL, ATC, MAC(f(~MK, ATC), <PDOL, AIP, ATC, IAD>), IAD
          >, 
          encPIN>
   ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank )
   ]
  --[ Once( <~PAN, ATC, 'Bank'> ) ]->
   [
   Bank_Checked_AC_Visa( $Bank, $Terminal,
                         <~PAN, AIP, CVM, PDOL, ATC, MAC(f(~MK, ATC), <PDOL, AIP, ATC, IAD>), IAD
                         >,
                         encPIN, channelID,
                         MAC_arpc(f(~MK, ATC),
                                  (MAC(f(~MK, ATC), <PDOL, AIP, ATC, IAD>)⊕p8('ARC')))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Receives_AC_Failed_Visa:
   [
   Recv( $Terminal, $Bank, <channelID, 'Visa', '1'>,
         <<~PAN, AIP, CVM, PDOL, ATC, AC, IAD>, encPIN>
   ),
   !Shk( ~PAN, ~MK )
   ]
  --[
  NEq( MAC(f(~MK, ATC), <PDOL, AIP, ATC, IAD>), AC ),
  BankDeclines( <~PAN, AIP, CVM, PDOL, ATC, AC, IAD> )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Processes_CVM_NotOnlinePIN_Visa:
   [
   Bank_Checked_AC_Visa( $Bank, $Terminal,
                         <~PAN, AIP, CVM, <TTQ, amount, country, currency, date, type, UN>, ATC, 
                          AC, IAD>,
                         'Null', channelID, ARPC
   )
   ]
  --[
  NEq( CVM, 'OnlinePIN' ),
  Running( $Bank, $Terminal,
           <'Bank', 'Terminal', ~PAN, AIP, CVM, 
            <TTQ, amount, country, currency, date, type, UN>, ATC, AC, IAD>
  )
  ]->
   [
   Bank_Commits_Visa( $Bank, $Terminal,
                      <~PAN, AIP, CVM, <TTQ, amount, country, currency, date, type, UN>, ATC, 
                       AC, IAD>,
                      channelID, ARPC
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Processes_CVM_OnlinePIN_Visa:
   [
   Bank_Checked_AC_Visa( $Bank, $Terminal,
                         <~PAN, AIP, 'OnlinePIN', PDOL, ATC, AC, IAD>, aenc(~PIN, pk(~privkBank)),
                         channelID, ARPC
   ),
   !LtkBank( $Bank, ~privkBank ), !PIN( ~PAN, ~PIN )
   ]
  --[
  Running( $Bank, $Terminal,
           <'Bank', 'Terminal', ~PAN, AIP, 'OnlinePIN', PDOL, ATC, AC, IAD>
  )
  ]->
   [
   Bank_Commits_Visa( $Bank, $Terminal,
                      <~PAN, AIP, 'OnlinePIN', PDOL, ATC, AC, IAD>, channelID, ARPC
   )
   ]

  /* has exactly the trivial AC variant */

restriction equal:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction not_equal:
  "∀ a #i. (NEq( a, a ) @ #i) ⇒ (⊥)"
  // safety formula

restriction once:
  "∀ a #i #j. ((Once( a ) @ #i) ∧ (Once( a ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction unique_role:
  "∀ A r1 r2 #i #j.
    ((Role( A, r1 ) @ #i) ∧ (Role( A, r2 ) @ #j)) ⇒ (r1 = r2)"
  // safety formula

restriction compatibility:
  "(∀ #i. (Compatible_CID_CVM( 'TC', 'OnlinePIN' ) @ #i) ⇒ (⊥)) ∧
   (∀ #i. (Compatible_CID_acType( 'TC', 'ARQC' ) @ #i) ⇒ (⊥))"
  // safety formula

lemma executable:
  exists-trace
  "∃ Bank PAN t #i #j #k #l.
    (((((((((#i < #j) ∧
            (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i)) ∧
           (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j)) ∧
          (#k < #l)) ∧
         (Running( PAN, Bank, <'Card', 'Bank', t> ) @ #k)) ∧
        (Commit( Bank, PAN, <'Card', 'Bank', t> ) @ #l)) ∧
       (∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b))) ∧
      (∀ #a #b. ((OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b)) ⇒ (#a = #b))) ∧
     (∀ A B r #a #b. ((Role( A, r ) @ #a) ∧ (Role( B, r ) @ #b)) ⇒ (A = B))) ∧
    (¬(∃ A #a. Compromise( A ) @ #a))"
/*
guarded formula characterizing all satisfying traces:
"∃ Bank PAN t #i #j #k #l.
  (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i) ∧
  (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j) ∧
  (Running( PAN, Bank, <'Card', 'Bank', t> ) @ #k) ∧
  (Commit( Bank, PAN, <'Card', 'Bank', t> ) @ #l)
 ∧
  (#i < #j) ∧
  (#k < #l) ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #a #b. (OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b) ⇒ #a = #b) ∧
  (∀ A B r #a #b. (Role( A, r ) @ #a) ∧ (Role( B, r ) @ #b) ⇒ A = B) ∧
  (∀ A #a. (Compromise( A ) @ #a) ⇒ ⊥)"
*/
simplify
solve( Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i )
  case Card_Responds_To_GenerateAC_NoCDA
  solve( !AIP( ~PAN, AIP ) ▶₁ #i )
    case Create_Card
    solve( !Shk( ~PAN, ~MK ) ▶₂ #i )
      case Create_Card
      solve( !IssuingBank( ~PAN, $Bank ) ▶₃ #i )
        case Create_Card
        solve( Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC ) ▶₀ #i )
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( Commit( 'Terminal', ~PAN,
                         <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, CVM, 
                          <PDOL, 'TVR', CVM, 'HHMMSS'>, ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <<PDOL, 'TVR', CVM, 'HHMMSS'>, <'SDA', $furtherData>, ~ATC, 'IAD', CID
                              >), 
                          'IAD', CID>
                 ) @ #j )
            case Terminal_Commits_ARQC
            solve( !KU( ~UN ) @ #vk.29 )
              case Terminal_Sends_GPO_case_2
              solve( Terminal_Received_AC( $Terminal, $Bank.1, $CA, nc, 'ARQC',
                                           <~PAN, <'SDA', $furtherData>, CVM, 
                                            <<$amount, country, currency, date, type, ~UN>, 'TVR', CVM, 
                                             'HHMMSS'>, 
                                            ~ATC, 
                                            MAC(f(~MK, ~ATC),
                                                <
                                                 <<$amount, country, currency, date, type, ~UN>, 'TVR', CVM, 
                                                  'HHMMSS'>, 
                                                 <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                            'IAD', CID>,
                                           'OnlinePIN', ~channelID
                     ) ▶₀ #j )
                case Terminal_Receives_AC_NoCDA_case_1
                solve( !KU( ~ATC ) @ #vk.37 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  solve( !KU( ~PAN ) @ #vk.43 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !Value( $amount, 'High' ) ▶₁ #j )
                      case Generate_Amount_High
                      solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                                   <'ARC', ARPC>
                             ) ▶₂ #j )
                        case Terminal_Bank_Network_case_2
                        solve( Running( ~PAN, Bank.1,
                                        <'Card', 'Bank', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         ~ATC, 
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                              <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                         'IAD', CID>
                               ) @ #k )
                          case Card_Responds_To_GenerateAC_NoCDA
                          solve( !Shk( ~PAN, ~MK ) ▶₂ #k )
                            case Create_Card
                            solve( !IssuingBank( ~PAN, $Bank.1 ) ▶₃ #k )
                              case Create_Card
                              solve( Card_Ready_For_Cryptogram( ~PAN,
                                                                <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                 'Purchase', ~UN>,
                                                                ~ATC
                                     ) ▶₀ #k )
                                case Card_Responds_To_ReadRecord_NotDDA
                                solve( Commit( $Bank, ~PAN,
                                               <'Card', 'Bank', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ~ATC, 
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                'IAD', CID>
                                       ) @ #l )
                                  case Bank_Commits
                                  solve( Bank_Commits( $Bank, $Terminal.1,
                                                       <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                        <
                                                         <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                          'Purchase', ~UN>, 
                                                         'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                        ~ATC, 
                                                        MAC(f(~MK, ~ATC),
                                                            <
                                                             <
                                                              <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                               'Purchase', ~UN>, 
                                                              'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                             <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                        'IAD', CID>,
                                                       channelID.1, ARPC.1
                                         ) ▶₀ #l )
                                    case Bank_Processes_CVM_OnlinePIN
                                    solve( !Value( $amount, 'High' ) ▶₁ #l )
                                      case Generate_Amount_High
                                      solve( !IssuingCA( $Bank, $CA.1 ) ▶₂ #l )
                                        case Create_Bank
                                        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.55 )
                                          case Card_Responds_To_ReadRecord_NotDDA
                                          solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', $furtherData>,
                                                           ~privkBank)
                                                 ) @ #vk.56 )
                                            case Card_Responds_To_ReadRecord_NotDDA
                                            solve( !KU( ~expDate ) @ #vk.49 )
                                              case Card_Responds_To_ReadRecord_NotDDA
                                              solve( Bank_Checked_AC( $Bank, $Terminal,
                                                                      <~PAN, <'SDA', furtherData.1>, 
                                                                       'OnlinePIN', 
                                                                       <
                                                                        <$amount.1, country, currency, date, 
                                                                         type, UN.1>, 
                                                                        CDOL1>, 
                                                                       ATC.1, AC, IAD>,
                                                                      aenc(~PIN, pk(~privkBank)), ~channelID,
                                                                      ARPC
                                                     ) ▶₀ #vr.26 )
                                                case Bank_Receives_AC
                                                solve( Bank_Checked_AC( $Bank, $Terminal.1,
                                                                        <~PAN, <'SDA', $furtherData>, 
                                                                         'OnlinePIN', 
                                                                         <
                                                                          <$amount, 'Switzerland', 'CHF', 
                                                                           'YYMMDD', 'Purchase', ~UN>, 
                                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                                         ~ATC, 
                                                                         MAC(f(~MK, ~ATC),
                                                                             <
                                                                              <
                                                                               <$amount, 'Switzerland', 
                                                                                'CHF', 'YYMMDD', 'Purchase', 
                                                                                ~UN>, 
                                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                                              <'SDA', $furtherData>, ~ATC, 
                                                                              'IAD', CID>), 
                                                                         'IAD', CID>,
                                                                        aenc(~PIN, pk(~privkBank)),
                                                                        channelID.1, ARPC
                                                       ) ▶₀ #vr.27 )
                                                  case Bank_Receives_AC
                                                  solve( !KU( MAC(f(~MK, ~ATC),
                                                                  <
                                                                   <
                                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                     'Purchase', ~UN>, 
                                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                                   <'SDA', $furtherData>, ~ATC, 'IAD', CID>)
                                                         ) @ #vk.48 )
                                                    case Card_Responds_To_GenerateAC_NoCDA
                                                    solve( !KU( pk(~privkBank) ) @ #vk.56 )
                                                      case Card_Responds_To_ReadRecord_NotDDA
                                                      SOLVED // trace found
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma bank_accepts:
  all-traces
  "∀ t #i.
    (TerminalAccepts( t ) @ #i) ⇒
    ((¬(∃ #j. BankDeclines( t ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ t #i.
  (TerminalAccepts( t ) @ #i)
 ∧
  (∃ #j. (BankDeclines( t ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( TerminalAccepts( t ) @ #i )
  case Terminal_Commits_ARQC
  solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                               <~PAN, <'SDA', furtherData>, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                               'OnlinePIN', ~channelID
         ) ▶₀ #i )
    case Terminal_Receives_AC_NoCDA_case_1
    by solve( !Value( $amount, 'High' ) ▶₁ #i )
  next
    case Terminal_Receives_AC_NoCDA_case_2
    solve( !Value( $amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                   <'ARC', ARPC>
             ) ▶₂ #i )
        case Terminal_Bank_Network_case_1
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               'Null', ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               'Null', ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               'Null', ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               'Null', ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.45 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               'Null', ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.38 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      next
        case Terminal_Bank_Network_case_2
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.42 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.42 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.41 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.42 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.42 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      next
        case Terminal_Bank_Network_case_3
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.45 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.38 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_3
    solve( !Value( $amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                   <'ARC', ARPC>
             ) ▶₂ #i )
        case Terminal_Bank_Network_case_1
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card_Visa
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_GPO_DDA_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.48 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_GPO_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.48 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.67 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.49 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_4
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.67 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.49 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      next
        case Terminal_Bank_Network_case_2
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card_Visa
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_GPO_DDA_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.72 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.51 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_GPO_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.72 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.51 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.53 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.52 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.53 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_4
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.52 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.72 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.53 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      next
        case Terminal_Bank_Network_case_3
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card_Visa
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_GPO_DDA_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.48 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_GPO_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.48 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.67 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.49 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_4
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.67 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.49 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_4
    solve( !Value( $amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                   <'ARC', ARPC>
             ) ▶₂ #i )
        case Terminal_Bank_Network_case_1
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               'Null', ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               'Null', ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               'Null', ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               'Null', ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.45 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               'Null', ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.38 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      next
        case Terminal_Bank_Network_case_2
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.42 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.42 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.41 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.42 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.42 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      next
        case Terminal_Bank_Network_case_3
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.2, country, currency, date, type, UN.2>, CDOL1>, 
                                                ATC.2, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.45 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by solve( Bank_Checked_AC( $Bank, $Terminal,
                                               <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                                <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                                ATC.1, AC.1, IAD.1>,
                                               aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                              ) ▶₀ #vr.13 )
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.38 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.46 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.39 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_5
    solve( !Value( $amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                   <'ARC', ARPC>
             ) ▶₂ #i )
        case Terminal_Bank_Network_case_1
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card_Visa
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_GPO_DDA_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.48 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_GPO_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.48 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.67 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.49 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_4
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.67 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.49 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      next
        case Terminal_Bank_Network_case_2
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card_Visa
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_GPO_DDA_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.72 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.51 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_GPO_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.72 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.51 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.53 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.52 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.53 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_4
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.52 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.72 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.53 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      next
        case Terminal_Bank_Network_case_3
        solve( BankDeclines( <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'OnlinePIN', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card_Visa
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_GPO_DDA_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.48 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_GPO_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.48 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.67 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.49 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_4
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.67 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.56 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.49 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.68 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.57 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_6
    solve( !Value( $amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                   <'ARC', ARPC>
             ) ▶₂ #i )
        case Terminal_Bank_Network_case_1
        solve( BankDeclines( <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'ODCVM', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.41 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.41 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.40 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.41 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.41 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case Create_Card_Visa
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_GPO_DDA_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_GPO_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.52 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.51 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.52 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_4
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.51 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.52 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      next
        case Terminal_Bank_Network_case_2
        solve( BankDeclines( <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'ODCVM', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.51 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.51 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.52 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.44 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.51 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.51 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.52 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.44 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.51 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.50 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.51 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.43 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.52 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.51 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.52 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.44 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.52 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.51 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.52 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.44 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case Create_Card_Visa
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_GPO_DDA_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.74 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.73 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.53 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_GPO_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.74 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.73 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.53 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.73 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.73 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.55 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.73 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.72 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.54 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.73 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.73 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.55 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_4
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.73 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.72 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.61 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.54 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.74 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.73 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.62 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.63 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.55 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      next
        case Terminal_Bank_Network_case_3
        solve( BankDeclines( <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'ODCVM', 'HHMMSS'>, 
                              ATC, AC, IAD>
               ) @ #j )
          case Bank_Receives_AC_Failed
          solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                       <
                        <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         ATC, AC, IAD>, 
                        encPIN>
                 ) ▶₀ #j )
            case Terminal_Bank_Network
            solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
              case Create_Card
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.41 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.41 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.47 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.40 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.41 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.48 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.49 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.41 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case Create_Card_Visa
              solve( !KU( ~PAN ) @ #vk.9 )
                case Card_Responds_To_GPO_DDA_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_GPO_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.50 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.52 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.51 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_3
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.52 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_4
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.27 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.69 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.58 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.26 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.51 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_EMV_Visa
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.71 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.25 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.70 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.59 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.24 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.60 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.52 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_Failed_Visa
          by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                          <
                           <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ATC, AC, IAD>, 
                           encPIN>
                    ) ▶₀ #j )
        qed
      qed
    qed
  qed
next
  case Terminal_Commits_TC
  solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                               <~PAN, <'SDA', furtherData>, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                               'OnlinePIN', ~channelID
         ) ▶₀ #i )
    case Terminal_Receives_AC_NoCDA_case_1
    by solve( !Value( $amount, 'High' ) ▶₁ #i )
  next
    case Terminal_Receives_AC_NoCDA_case_2
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_3
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_4
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_5
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_6
    solve( !Value( $amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( BankDeclines( <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ATC, AC, IAD>
             ) @ #j )
        case Bank_Receives_AC_Failed
        solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
                     <
                      <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'ODCVM', 'HHMMSS'>, 
                       ATC, AC, IAD>, 
                      encPIN>
               ) ▶₀ #j )
          case Terminal_Bank_Network
          solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
            case Create_Card
            solve( !KU( ~PAN ) @ #vk.9 )
              case Card_Responds_To_ReadRecord_DDA_case_1
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.48 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.25 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.48 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.49 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.41 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_case_2
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.48 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.25 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.48 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.49 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.41 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.48 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.25 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.58 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.47 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.48 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.40 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.49 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.25 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.48 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.49 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.41 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_3
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.49 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.25 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.48 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.49 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.41 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Compromise_Card
              by contradiction /* from formulas */
            qed
          next
            case Create_Card_Visa
            solve( !KU( ~PAN ) @ #vk.9 )
              case Card_Responds_To_GPO_DDA_Visa
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.25 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.70 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.71 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.50 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_GPO_EMV_Visa
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.25 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.70 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.71 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.50 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_1
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.26 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.27 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.69 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.26 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.70 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.26 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.58 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.26 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.51 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_2
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.25 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.70 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.70 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.52 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_3
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.26 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.27 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.69 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.26 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.70 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.26 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.58 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.26 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.51 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_4
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.25 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.70 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.70 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.52 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_EMV_Visa
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.25 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.70 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.71 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.59 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                 ~privkBank)
                       ) @ #vk.24 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.60 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.52 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Compromise_Card
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Bank_Receives_AC_Failed_Visa
        by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Visa', '1'>,
                        <
                         <~PAN, <'SDA', 'ODCVM', furtherData2>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, AC, IAD>, 
                         encPIN>
                  ) ▶₀ #j )
      qed
    qed
  qed
qed

lemma auth_to_terminal_minimal:
  all-traces
  "∀ T P r t #i.
    ((∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b)) ∧
     (Commit( T, P, <r, 'Terminal', t> ) @ #i)) ⇒
    ((∃ #j. Running( P, T, <r, 'Terminal', t> ) @ #j) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ T P r t #i.
  (Commit( T, P, <r, 'Terminal', t> ) @ #i)
 ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #j. (Running( P, T, <r, 'Terminal', t> ) @ #j) ⇒ ⊥) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Commit( T, P, <r, 'Terminal', t> ) @ #i )
  case Terminal_Commits_ARQC_case_1
  solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                               <~PAN, <'SDA', furtherData>, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                               'OnlinePIN', ~channelID
         ) ▶₀ #i )
    case Terminal_Receives_AC_NoCDA_case_1
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.52 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        by solve( !Value( $amount, 'High' ) ▶₁ #i )
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.41 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.31 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_2
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.45 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.56 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.55 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                       <'ARC', ARPC>
                 ) ▶₂ #i )
            case Terminal_Bank_Network_case_1
            by solve( Bank_Checked_AC( $Bank, $Terminal,
                                       <~PAN.1, <'SDA', furtherData.1>, CVM.1, 
                                        <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, 
                                        AC.1, IAD.1>,
                                       'Null', ~channelID, ARPC
                      ) ▶₀ #vr.24 )
          next
            case Terminal_Bank_Network_case_2
            solve( Bank_Checked_AC( $Bank, $Terminal,
                                    <~PAN.1, <'SDA', furtherData.1>, 'OnlinePIN', 
                                     <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, AC.1, 
                                     IAD.1>,
                                    aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                   ) ▶₀ #vr.24 )
              case Bank_Receives_AC
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'SDA', $furtherData>, ATC, IAD>)
                     ) @ #vk.12 )
                case Card_Responds_To_GenerateAC_NoCDA
                by contradiction /* from formulas */
              next
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.41 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.58 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Terminal_Bank_Network_case_3
            by solve( Bank_Checked_AC( $Bank, $Terminal,
                                       <~PAN.1, <'SDA', furtherData.1>, 'OnlinePIN', 
                                        <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, 
                                        AC.1, IAD.1>,
                                       aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                      ) ▶₀ #vr.24 )
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.44 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.45 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.34 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_3
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.52 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.41 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.31 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_4
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.45 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.56 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.55 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                       <'ARC', ARPC>
                 ) ▶₂ #i )
            case Terminal_Bank_Network_case_1
            by solve( Bank_Checked_AC( $Bank, $Terminal,
                                       <~PAN.1, <'SDA', furtherData.1>, CVM.1, 
                                        <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, 
                                        AC.1, IAD.1>,
                                       'Null', ~channelID, ARPC
                      ) ▶₀ #vr.24 )
          next
            case Terminal_Bank_Network_case_2
            by solve( Bank_Checked_AC( $Bank, $Terminal,
                                       <~PAN.1, <'SDA', furtherData.1>, 'OnlinePIN', 
                                        <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, 
                                        AC.1, IAD.1>,
                                       aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                      ) ▶₀ #vr.24 )
          next
            case Terminal_Bank_Network_case_3
            by solve( Bank_Checked_AC( $Bank, $Terminal,
                                       <~PAN.1, <'SDA', furtherData.1>, 'OnlinePIN', 
                                        <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, 
                                        AC.1, IAD.1>,
                                       aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                      ) ▶₀ #vr.24 )
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.44 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.45 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.34 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_5
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.52 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.41 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.31 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_6
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.44 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.55 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.43 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.44 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.33 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Terminal_Commits_ARQC_case_2
  solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                               <~PAN, <'SDA', furtherData>, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                               'OnlinePIN', ~channelID
         ) ▶₀ #i )
    case Terminal_Receives_AC_NoCDA_case_1
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.52 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        by solve( !Value( $amount, 'High' ) ▶₁ #i )
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.41 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.31 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_2
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.45 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.56 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.55 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                       <'ARC', ARPC>
                 ) ▶₂ #i )
            case Terminal_Bank_Network_case_1
            by solve( Bank_Checked_AC( $Bank, $Terminal,
                                       <~PAN.1, <'SDA', furtherData.1>, CVM.1, 
                                        <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, 
                                        AC.1, IAD.1>,
                                       'Null', ~channelID, ARPC
                      ) ▶₀ #vr.24 )
          next
            case Terminal_Bank_Network_case_2
            solve( Bank_Checked_AC( $Bank, $Terminal,
                                    <~PAN.1, <'SDA', furtherData.1>, 'OnlinePIN', 
                                     <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, AC.1, 
                                     IAD.1>,
                                    aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                   ) ▶₀ #vr.24 )
              case Bank_Receives_AC
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Bank_Network_case_3
            by solve( Bank_Checked_AC( $Bank, $Terminal,
                                       <~PAN.1, <'SDA', furtherData.1>, 'OnlinePIN', 
                                        <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, 
                                        AC.1, IAD.1>,
                                       aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                      ) ▶₀ #vr.24 )
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.44 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.45 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.34 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_3
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.52 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.41 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.31 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_4
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.45 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.56 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.55 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                       <'ARC', ARPC>
                 ) ▶₂ #i )
            case Terminal_Bank_Network_case_1
            by solve( Bank_Checked_AC( $Bank, $Terminal,
                                       <~PAN.1, <'SDA', furtherData.1>, CVM.1, 
                                        <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, 
                                        AC.1, IAD.1>,
                                       'Null', ~channelID, ARPC
                      ) ▶₀ #vr.24 )
          next
            case Terminal_Bank_Network_case_2
            by solve( Bank_Checked_AC( $Bank, $Terminal,
                                       <~PAN.1, <'SDA', furtherData.1>, 'OnlinePIN', 
                                        <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, 
                                        AC.1, IAD.1>,
                                       aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                      ) ▶₀ #vr.24 )
          next
            case Terminal_Bank_Network_case_3
            by solve( Bank_Checked_AC( $Bank, $Terminal,
                                       <~PAN.1, <'SDA', furtherData.1>, 'OnlinePIN', 
                                        <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.2, 
                                        AC.1, IAD.1>,
                                       aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                      ) ▶₀ #vr.24 )
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.44 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.45 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.34 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_5
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.52 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.41 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.31 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_6
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.44 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.55 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.43 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.44 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.33 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Terminal_Commits_TC
  solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                               <~PAN, <'SDA', furtherData>, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                               'OnlinePIN', ~channelID
         ) ▶₀ #i )
    case Terminal_Receives_AC_NoCDA_case_1
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.52 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        by solve( !Value( $amount, 'High' ) ▶₁ #i )
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.41 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.42 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.31 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_2
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_3
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_4
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_5
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_6
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.44 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.25 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_DDA_Visa_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.55 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.43 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.44 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.33 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma auth_to_terminal:
  all-traces
  "∀ T P r t #i.
    (Commit( T, P, <r, 'Terminal', t> ) @ #i) ⇒
    (((∃ #j. (Running( P, T, <r, 'Terminal', t> ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ T2 P2 #i2.
          (Commit( T2, P2, <r, 'Terminal', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ T P r t #i.
  (Commit( T, P, <r, 'Terminal', t> ) @ #i)
 ∧
  (((∀ #j. (Running( P, T, <r, 'Terminal', t> ) @ #j) ⇒ ¬(#j < #i)) ∨
    (∃ T2 P2 #i2.
      (Commit( T2, P2, <r, 'Terminal', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( (∀ #j. (Running( P, T, <r, 'Terminal', t> ) @ #j) ⇒ ¬(#j < #i))  ∥
       (∃ T2 P2 #i2.
         (Commit( T2, P2, <r, 'Terminal', t> ) @ #i2) ∧ ¬(#i2 = #i)) )
  case case_1
  solve( Commit( T, P, <r, 'Terminal', t> ) @ #i )
    case Terminal_Commits_ARQC_case_1
    solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                 <~PAN, <'SDA', furtherData>, CVM, 
                                  <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                                 'OnlinePIN', ~channelID
           ) ▶₀ #i )
      case Terminal_Receives_AC_NoCDA_case_1
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.41 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.31 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_2
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                       AC.1, IAD.1>,
                                      aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                     ) ▶₀ #vr.32 )
                case Bank_Receives_AC
                solve( !KU( MAC(f(~MK, ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'SDA', $furtherData>, ATC, IAD>)
                       ) @ #vk.12 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                    case c_f
                    solve( !KU( ~MK ) @ #vk.63 )
                      case Compromise_Bank_Card_ShK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.45 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                       ATC.3, AC.1, IAD.1>,
                                      aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                     ) ▶₀ #vr.32 )
                case Bank_Receives_AC
                solve( !KU( MAC(f(~MK, ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'SDA', $furtherData>, ATC, IAD>)
                       ) @ #vk.12 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                    case c_f
                    solve( !KU( ~MK ) @ #vk.74 )
                      case Compromise_Bank_Card_ShK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                       ATC.3, AC.1, IAD.1>,
                                      aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                     ) ▶₀ #vr.32 )
                case Bank_Receives_AC
                solve( !KU( MAC(f(~MK, ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'SDA', $furtherData>, ATC, IAD>)
                       ) @ #vk.15 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~MK, ATC) ) @ #vk.56 )
                    case c_f
                    solve( !KU( ~MK ) @ #vk.73 )
                      case Compromise_Bank_Card_ShK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                       AC.1, IAD.1>,
                                      aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                     ) ▶₀ #vr.32 )
                case Bank_Receives_AC
                solve( !KU( MAC(f(~MK, ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'SDA', $furtherData>, ATC, IAD>)
                       ) @ #vk.12 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~MK, ATC) ) @ #vk.45 )
                    case c_f
                    solve( !KU( ~MK ) @ #vk.62 )
                      case Compromise_Bank_Card_ShK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.44 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                       AC.1, IAD.1>,
                                      aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                     ) ▶₀ #vr.32 )
                case Bank_Receives_AC
                solve( !KU( MAC(f(~MK, ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'SDA', $furtherData>, ATC, IAD>)
                       ) @ #vk.12 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                    case c_f
                    solve( !KU( ~MK ) @ #vk.63 )
                      case Compromise_Bank_Card_ShK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.45 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.34 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_3
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.41 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.31 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_4
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.45 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.44 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.45 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.34 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_5
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.41 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.31 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_6
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.44 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.25 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.43 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.44 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.33 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Commits_ARQC_case_2
    solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                 <~PAN, <'SDA', furtherData>, CVM, 
                                  <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                                 'OnlinePIN', ~channelID
           ) ▶₀ #i )
      case Terminal_Receives_AC_NoCDA_case_1
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.41 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.31 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_2
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                       AC.1, IAD.1>,
                                      aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                     ) ▶₀ #vr.32 )
                case Bank_Receives_AC
                by contradiction /* from formulas */
              qed
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.45 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                       ATC.3, AC.1, IAD.1>,
                                      aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                     ) ▶₀ #vr.32 )
                case Bank_Receives_AC
                by contradiction /* from formulas */
              qed
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                       ATC.3, AC.1, IAD.1>,
                                      aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                     ) ▶₀ #vr.32 )
                case Bank_Receives_AC
                by contradiction /* from formulas */
              qed
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                       AC.1, IAD.1>,
                                      aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                     ) ▶₀ #vr.32 )
                case Bank_Receives_AC
                by contradiction /* from formulas */
              qed
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.44 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                       AC.1, IAD.1>,
                                      aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                     ) ▶₀ #vr.32 )
                case Bank_Receives_AC
                by contradiction /* from formulas */
              qed
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.45 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.34 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_3
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.41 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.31 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_4
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.45 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.1, 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.2, country.1, currency.1, date.1, type.1, UN.2>, CDOL1>, 
                                          ATC.3, AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.44 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i )
              case Terminal_Bank_Network_case_1
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, CVM.2, 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         'Null', ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_2
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            next
              case Terminal_Bank_Network_case_3
              by solve( Bank_Checked_AC( $Bank, $Terminal,
                                         <~PAN.2, <'SDA', furtherData.2>, 'OnlinePIN', 
                                          <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                          AC.1, IAD.1>,
                                         aenc(~PIN.1, pk(~privkBank)), ~channelID, ARPC
                        ) ▶₀ #vr.32 )
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.45 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.34 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_5
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.41 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.31 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_6
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.44 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.25 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.43 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.44 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.33 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Commits_TC
    solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                 <~PAN, <'SDA', furtherData>, CVM, 
                                  <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                                 'OnlinePIN', ~channelID
           ) ▶₀ #i )
      case Terminal_Receives_AC_NoCDA_case_1
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.25 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.41 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.42 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.31 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_2
      by contradiction /* from formulas */
    next
      case Terminal_Receives_AC_NoCDA_case_3
      by contradiction /* from formulas */
    next
      case Terminal_Receives_AC_NoCDA_case_4
      by contradiction /* from formulas */
    next
      case Terminal_Receives_AC_NoCDA_case_5
      by contradiction /* from formulas */
    next
      case Terminal_Receives_AC_NoCDA_case_6
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.44 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.25 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.43 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.44 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.33 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case case_2
  solve( (#i2 < #i)  ∥ (#i < #i2) )
    case case_1
    solve( Commit( T, P, <r, 'Terminal', t> ) @ #i )
      case Terminal_Commits_ARQC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'SDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                                   'OnlinePIN', ~channelID
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA_case_1
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_2
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.56 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.34 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_3
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_4
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.56 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.34 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_5
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_6
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.54 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.43 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.33 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Terminal_Commits_ARQC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'SDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                                   'OnlinePIN', ~channelID
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA_case_1
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_2
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.56 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.34 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_3
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_4
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.56 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.34 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_5
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_6
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.54 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.43 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.33 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Terminal_Commits_TC
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'SDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                                   'OnlinePIN', ~channelID
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA_case_1
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_2
        by contradiction /* from formulas */
      next
        case Terminal_Receives_AC_NoCDA_case_3
        by contradiction /* from formulas */
      next
        case Terminal_Receives_AC_NoCDA_case_4
        by contradiction /* from formulas */
      next
        case Terminal_Receives_AC_NoCDA_case_5
        by contradiction /* from formulas */
      next
        case Terminal_Receives_AC_NoCDA_case_6
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.54 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.43 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.33 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Commit( T, P, <r, 'Terminal', t> ) @ #i )
      case Terminal_Commits_ARQC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'SDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                                   'OnlinePIN', ~channelID
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA_case_1
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_2
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.56 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.34 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_3
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_4
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.56 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Card', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                next
                  case Terminal_Commits_TC
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                                  <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   ATC, AC, IAD>,
                                                  'OnlinePIN', ~channelID.1
                            ) ▶₀ #i2 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.34 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_5
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_6
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.54 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.43 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.33 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Terminal_Commits_ARQC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'SDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                                   'OnlinePIN', ~channelID
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA_case_1
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_2
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.56 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.34 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_3
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_4
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.56 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Terminal_Bank_Network_case_3
                solve( Commit( T2, P2,
                               <'Bank', 'Terminal', ~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'OnlinePIN', 'HHMMSS'>, 
                                ATC, AC, IAD>
                       ) @ #i2 )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                               <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                ATC, AC, IAD>,
                                               'OnlinePIN', ~channelID.1
                         ) ▶₀ #i2 )
                    case Terminal_Receives_AC_NoCDA
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.45 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.34 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_5
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_6
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.54 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.43 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.33 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Terminal_Commits_TC
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'SDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD>,
                                   'OnlinePIN', ~channelID
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA_case_1
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.52 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.41 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', furtherData>, ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.42 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.31 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case Terminal_Receives_AC_NoCDA_case_2
        by contradiction /* from formulas */
      next
        case Terminal_Receives_AC_NoCDA_case_3
        by contradiction /* from formulas */
      next
        case Terminal_Receives_AC_NoCDA_case_4
        by contradiction /* from formulas */
      next
        case Terminal_Receives_AC_NoCDA_case_5
        by contradiction /* from formulas */
      next
        case Terminal_Receives_AC_NoCDA_case_6
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.25 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.54 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_Visa_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.55 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.43 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.24 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.44 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.33 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma auth_to_bank_minimal:
  all-traces
  "∀ B P r t #i.
    ((∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b)) ∧
     (Commit( B, P, <r, 'Bank', t> ) @ #i)) ⇒
    ((∃ #j. Running( P, B, <r, 'Bank', t> ) @ #j) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ B P r t #i.
  (Commit( B, P, <r, 'Bank', t> ) @ #i)
 ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #j. (Running( P, B, <r, 'Bank', t> ) @ #j) ⇒ ⊥) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Commit( B, P, <r, 'Bank', t> ) @ #i )
  case Bank_Commits_case_1
  solve( Bank_Commits( $Bank, $Terminal,
                       <~PAN, <'SDA', furtherData>, CVM, 
                        <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                       channelID, ARPC
         ) ▶₀ #i )
    case Bank_Processes_CVM_NotOnlinePIN
    solve( !Value( amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
        case Create_Bank
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'SDA', furtherData>, CVM, 
                                 <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                'Null', channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC_case_1
          solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.27 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.47 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_Visa_case_1
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.27 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.58 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_Visa_case_2
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.27 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.58 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.27 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.46 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.27 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.47 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkCA ) @ #vk.36 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        next
          case Bank_Receives_AC_case_2
          solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.24 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.44 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_Visa_case_1
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.24 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.55 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_Visa_case_2
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.24 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.55 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.24 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.43 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.24 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.44 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkCA ) @ #vk.33 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Bank_Processes_CVM_OnlinePIN_case_1
    solve( !Value( amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
        case Create_Bank
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                 <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                aenc(~PIN, pk(~privkBank)), channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC
          solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                 ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                   ) @ #vk.27 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.45 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_Visa_case_1
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                   ) @ #vk.27 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.56 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_Visa_case_2
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                   ) @ #vk.27 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.56 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                   ) @ #vk.27 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'SDA', $furtherData>, ATC, IAD>)
                     ) @ #vk.12 )
                case Card_Responds_To_GenerateAC_NoCDA
                by contradiction /* from formulas */
              next
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.41 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.58 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.44 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                   ) @ #vk.27 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.45 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkCA ) @ #vk.34 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Bank_Processes_CVM_OnlinePIN_case_2
    solve( !Value( amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
        case Create_Bank
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                 <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                aenc(~PIN, pk(~privkBank)), channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC
          solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                 ) @ #vk.22 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                   ) @ #vk.24 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.42 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_Visa_case_1
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                   ) @ #vk.24 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.53 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_Visa_case_2
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                   ) @ #vk.24 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.53 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                   ) @ #vk.24 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.41 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                   ) @ #vk.24 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.42 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkCA ) @ #vk.31 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Bank_Commits_case_2
  solve( Bank_Commits( $Bank, $Terminal,
                       <~PAN, <'SDA', furtherData>, CVM, 
                        <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                       channelID, ARPC
         ) ▶₀ #i )
    case Bank_Processes_CVM_NotOnlinePIN
    solve( !Value( amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
        case Create_Bank
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'SDA', furtherData>, CVM, 
                                 <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                'Null', channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC_case_1
          by contradiction /* from formulas */
        next
          case Bank_Receives_AC_case_2
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Bank_Processes_CVM_OnlinePIN_case_1
    solve( !Value( amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
        case Create_Bank
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                 <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                aenc(~PIN, pk(~privkBank)), channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Bank_Processes_CVM_OnlinePIN_case_2
    solve( !Value( amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
        case Create_Bank
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                 <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                aenc(~PIN, pk(~privkBank)), channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma auth_to_bank:
  all-traces
  "∀ B P r t #i.
    (Commit( B, P, <r, 'Bank', t> ) @ #i) ⇒
    (((∃ #j. (Running( P, B, <r, 'Bank', t> ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ B2 P2 #i2.
          (Commit( B2, P2, <r, 'Bank', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ B P r t #i.
  (Commit( B, P, <r, 'Bank', t> ) @ #i)
 ∧
  (((∀ #j. (Running( P, B, <r, 'Bank', t> ) @ #j) ⇒ ¬(#j < #i)) ∨
    (∃ B2 P2 #i2. (Commit( B2, P2, <r, 'Bank', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( (∀ #j. (Running( P, B, <r, 'Bank', t> ) @ #j) ⇒ ¬(#j < #i))  ∥
       (∃ B2 P2 #i2. (Commit( B2, P2, <r, 'Bank', t> ) @ #i2) ∧ ¬(#i2 = #i)) )
  case case_1
  solve( Commit( B, P, <r, 'Bank', t> ) @ #i )
    case Bank_Commits_case_1
    solve( Bank_Commits( $Bank, $Terminal,
                         <~PAN, <'SDA', furtherData>, CVM, 
                          <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                         channelID, ARPC
           ) ▶₀ #i )
      case Bank_Processes_CVM_NotOnlinePIN
      solve( !Value( amount, 'High' ) ▶₁ #i )
        case Generate_Amount_High
        solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
          case Create_Bank
          solve( Bank_Checked_AC( $Bank, $Terminal,
                                  <~PAN, <'SDA', furtherData>, CVM, 
                                   <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                  'Null', channelID, ARPC
                 ) ▶₀ #vr )
            case Bank_Receives_AC_case_1
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.25 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.27 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.47 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.27 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.58 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.27 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.58 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.27 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.46 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.27 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.47 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.36 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Bank_Receives_AC_case_2
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.44 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.55 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.55 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.43 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.44 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.33 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Bank_Processes_CVM_OnlinePIN_case_1
      solve( !Value( amount, 'High' ) ▶₁ #i )
        case Generate_Amount_High
        solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
          case Create_Bank
          solve( Bank_Checked_AC( $Bank, $Terminal,
                                  <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                   <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                  aenc(~PIN, pk(~privkBank)), channelID, ARPC
                 ) ▶₀ #vr )
            case Bank_Receives_AC
            solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                   ) @ #vk.25 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                     ) @ #vk.27 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( MAC(f(~MK, ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'SDA', $furtherData>, ATC, IAD>)
                       ) @ #vk.12 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                    case c_f
                    solve( !KU( ~MK ) @ #vk.63 )
                      case Compromise_Bank_Card_ShK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.45 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                     ) @ #vk.27 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( MAC(f(~MK, ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'SDA', $furtherData>, ATC, IAD>)
                       ) @ #vk.12 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                    case c_f
                    solve( !KU( ~MK ) @ #vk.74 )
                      case Compromise_Bank_Card_ShK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.56 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                     ) @ #vk.27 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( MAC(f(~MK, ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'SDA', $furtherData>, ATC, IAD>)
                       ) @ #vk.12 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                    case c_f
                    solve( !KU( ~MK ) @ #vk.74 )
                      case Compromise_Bank_Card_ShK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.56 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                     ) @ #vk.27 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( MAC(f(~MK, ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'SDA', $furtherData>, ATC, IAD>)
                       ) @ #vk.13 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~MK, ATC) ) @ #vk.45 )
                    case c_f
                    solve( !KU( ~MK ) @ #vk.62 )
                      case Compromise_Bank_Card_ShK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.44 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                     ) @ #vk.27 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( MAC(f(~MK, ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'SDA', $furtherData>, ATC, IAD>)
                       ) @ #vk.12 )
                  case Card_Responds_To_GenerateAC_NoCDA
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                    case c_f
                    solve( !KU( ~MK ) @ #vk.63 )
                      case Compromise_Bank_Card_ShK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.45 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.34 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Bank_Processes_CVM_OnlinePIN_case_2
      solve( !Value( amount, 'High' ) ▶₁ #i )
        case Generate_Amount_High
        solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
          case Create_Bank
          solve( Bank_Checked_AC( $Bank, $Terminal,
                                  <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                   <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                  aenc(~PIN, pk(~privkBank)), channelID, ARPC
                 ) ▶₀ #vr )
            case Bank_Receives_AC
            solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                   ) @ #vk.22 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.42 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.53 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_DDA_Visa_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.53 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.41 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.42 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.31 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Bank_Commits_case_2
    solve( Bank_Commits( $Bank, $Terminal,
                         <~PAN, <'SDA', furtherData>, CVM, 
                          <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                         channelID, ARPC
           ) ▶₀ #i )
      case Bank_Processes_CVM_NotOnlinePIN
      solve( !Value( amount, 'High' ) ▶₁ #i )
        case Generate_Amount_High
        solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
          case Create_Bank
          solve( Bank_Checked_AC( $Bank, $Terminal,
                                  <~PAN, <'SDA', furtherData>, CVM, 
                                   <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                  'Null', channelID, ARPC
                 ) ▶₀ #vr )
            case Bank_Receives_AC_case_1
            by contradiction /* from formulas */
          next
            case Bank_Receives_AC_case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Bank_Processes_CVM_OnlinePIN_case_1
      solve( !Value( amount, 'High' ) ▶₁ #i )
        case Generate_Amount_High
        solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
          case Create_Bank
          solve( Bank_Checked_AC( $Bank, $Terminal,
                                  <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                   <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                  aenc(~PIN, pk(~privkBank)), channelID, ARPC
                 ) ▶₀ #vr )
            case Bank_Receives_AC
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Bank_Processes_CVM_OnlinePIN_case_2
      solve( !Value( amount, 'High' ) ▶₁ #i )
        case Generate_Amount_High
        solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
          case Create_Bank
          solve( Bank_Checked_AC( $Bank, $Terminal,
                                  <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                   <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                  aenc(~PIN, pk(~privkBank)), channelID, ARPC
                 ) ▶₀ #vr )
            case Bank_Receives_AC
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( (#i2 < #i)  ∥ (#i < #i2) )
    case case_1
    solve( Commit( B, P, <r, 'Bank', t> ) @ #i )
      case Bank_Commits_case_1
      solve( Bank_Commits( $Bank, $Terminal,
                           <~PAN, <'SDA', furtherData>, CVM, 
                            <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                           channelID, ARPC
             ) ▶₀ #i )
        case Bank_Processes_CVM_NotOnlinePIN
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'SDA', furtherData>, CVM, 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, CVM, 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            'Null', channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC_case_1
                      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.25 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.47 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.58 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.58 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.46 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.47 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.36 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Bank_Receives_AC_case_2
                      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.55 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.55 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.43 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.33 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Processes_CVM_OnlinePIN_case_1
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN_case_1
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            aenc(~PIN, pk(~privkBank)), channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC
                      solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                             ) @ #vk.25 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.63 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.45 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.74 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.56 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.74 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.56 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.13 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.45 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.62 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.63 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.45 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.34 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN_case_2
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            aenc(~PIN, pk(~privkBank)), channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC
                      solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                             ) @ #vk.22 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.42 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.53 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.53 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.41 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.42 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.31 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bank_Commits_case_2
      solve( Bank_Commits( $Bank, $Terminal,
                           <~PAN, <'SDA', furtherData>, CVM, 
                            <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                           channelID, ARPC
             ) ▶₀ #i )
        case Bank_Processes_CVM_NotOnlinePIN
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'SDA', furtherData>, CVM, 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, CVM, 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            'Null', channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC_case_1
                      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.25 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.47 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.58 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.58 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.46 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.47 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.36 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Bank_Receives_AC_case_2
                      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.55 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.55 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.43 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.33 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Processes_CVM_OnlinePIN_case_1
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN_case_1
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            aenc(~PIN, pk(~privkBank)), channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC
                      solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                             ) @ #vk.25 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.63 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.45 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.74 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.56 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.74 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.56 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.13 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.45 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.62 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.63 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.45 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.34 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN_case_2
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            aenc(~PIN, pk(~privkBank)), channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC
                      solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                             ) @ #vk.22 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.42 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.53 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.53 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.41 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.42 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.31 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Commit( B, P, <r, 'Bank', t> ) @ #i )
      case Bank_Commits_case_1
      solve( Bank_Commits( $Bank, $Terminal,
                           <~PAN, <'SDA', furtherData>, CVM, 
                            <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                           channelID, ARPC
             ) ▶₀ #i )
        case Bank_Processes_CVM_NotOnlinePIN
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'SDA', furtherData>, CVM, 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, CVM, 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            'Null', channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC_case_1
                      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.25 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.47 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.58 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.58 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.46 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.47 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.36 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Bank_Receives_AC_case_2
                      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.55 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.55 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.43 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.33 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Processes_CVM_OnlinePIN_case_1
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN_case_1
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            aenc(~PIN, pk(~privkBank)), channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC
                      solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                             ) @ #vk.25 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.63 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.45 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.74 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.56 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.74 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.56 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.13 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.45 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.62 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.63 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.45 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.34 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN_case_2
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            aenc(~PIN, pk(~privkBank)), channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC
                      solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                             ) @ #vk.22 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.42 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.53 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.53 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.41 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.42 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.31 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bank_Commits_case_2
      solve( Bank_Commits( $Bank, $Terminal,
                           <~PAN, <'SDA', furtherData>, CVM, 
                            <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                           channelID, ARPC
             ) ▶₀ #i )
        case Bank_Processes_CVM_NotOnlinePIN
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'SDA', furtherData>, CVM, 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, CVM, 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            'Null', channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC_case_1
                      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.25 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.47 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.58 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.58 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.46 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.27 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.47 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.36 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Bank_Receives_AC_case_2
                      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.55 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.55 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.43 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', furtherData2>,
                                         ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.33 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Processes_CVM_OnlinePIN_case_1
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN_case_1
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            aenc(~PIN, pk(~privkBank)), channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC
                      solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                             ) @ #vk.25 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.63 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.45 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.74 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.56 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.74 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.56 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.13 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.45 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.62 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.44 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.27 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'SDA', $furtherData>, ATC, IAD>)
                                 ) @ #vk.12 )
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                                    <~PAN, <'SDA', $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'SDA', $furtherData>, ~ATC, 'IAD', CID>), 
                                                     'IAD', CID>,
                                                    aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                                   ) ▶₀ #vr.6 )
                              case Bank_Receives_AC
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.46 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.63 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.45 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.34 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN_case_2
        solve( !Value( amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
            case Create_Bank
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                            <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                    <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>,
                                   channelID.1, ARPC.1
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !Value( $amount, 'High' ) ▶₁ #i2 )
                  case Generate_Amount_High
                  solve( !IssuingCA( $Bank.1, $CA.1 ) ▶₂ #i2 )
                    case Create_Bank
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN, <'SDA', furtherData>, 'OnlinePIN', 
                                             <<$amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, 
                                             IAD>,
                                            aenc(~PIN, pk(~privkBank)), channelID, ARPC
                           ) ▶₀ #vr )
                      case Bank_Receives_AC
                      solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                             ) @ #vk.22 )
                        case Card_Responds_To_ReadRecord_DDA
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.42 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.53 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_DDA_Visa_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.53 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.41 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case Card_Responds_To_ReadRecord_NotDDA_case_2
                        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData>, ~privkBank)
                               ) @ #vk.24 )
                          case c_sign
                          solve( !KU( ~privkBank ) @ #vk.42 )
                            case Compromise_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkCA ) @ #vk.31 )
                          case Compromise_CA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy_MK:
  all-traces
  "∀ MK #i.
    (SecretMK( MK ) @ #i) ⇒
    ((¬(∃ #j. !KU( MK ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ MK #i.
  (SecretMK( MK ) @ #i)
 ∧
  (∃ #j. (!KU( MK ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( SecretMK( MK ) @ #i )
  case Create_Card
  solve( !LtkBank( $Bank, ~privkBank ) ▶₃ #i )
    case Create_Bank
    solve( !CertBank( $Bank, certBank ) ▶₄ #i )
      case Create_Bank
      solve( !IssuingCA( $Bank, $CA.1 ) ▶₅ #i )
        case Create_Bank
        solve( !KU( ~MK ) @ #j )
          case Compromise_Bank_Card_ShK
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Create_Card_Visa
  solve( !LtkBank( $Bank, ~privkBank ) ▶₄ #i )
    case Create_Bank
    solve( !CertBank( $Bank, certBank ) ▶₅ #i )
      case Create_Bank
      solve( !IssuingCA( $Bank, $CA.1 ) ▶₆ #i )
        case Create_Bank
        solve( !KU( ~MK ) @ #j )
          case Compromise_Bank_Card_ShK
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma secrecy_PIN:
  all-traces
  "∀ PIN #i.
    (SecretPIN( PIN ) @ #i) ⇒
    ((¬(∃ #j. !KU( PIN ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ PIN #i.
  (SecretPIN( PIN ) @ #i)
 ∧
  (∃ #j. (!KU( PIN ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Set_PIN( ~PAN, CVM, $CA, $Bank ) ▶₁ #i )
  case Create_Card
  by solve( !KU( ~PIN ) @ #j )
next
  case Create_Card_Visa
  by solve( !KU( ~PIN ) @ #j )
qed

lemma secrecy_PAN:
  all-traces
  "∀ PAN #i.
    (SecretPAN( PAN ) @ #i) ⇒
    ((¬(∃ #j. !KU( PAN ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ PAN #i.
  (SecretPAN( PAN ) @ #i)
 ∧
  (∃ #j. (!KU( PAN ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( SecretPAN( PAN ) @ #i )
  case Create_Card
  solve( !LtkBank( $Bank, ~privkBank ) ▶₃ #i )
    case Create_Bank
    solve( !CertBank( $Bank, certBank ) ▶₄ #i )
      case Create_Bank
      solve( !IssuingCA( $Bank, $CA.1 ) ▶₅ #i )
        case Create_Bank
        solve( !KU( ~PAN ) @ #j )
          case Card_Responds_To_ReadRecord_DDA_case_1
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: models-n-proofs/contactless/Mastercard_SDA_OnlinePIN_High.spthy

  output:          models-n-proofs/contactless/Mastercard_SDA_OnlinePIN_High.proof
  processing time: 612.481608432s
  executable (exists-trace): verified (29 steps)
  bank_accepts (all-traces): verified (2315 steps)
  auth_to_terminal_minimal (all-traces): verified (290 steps)
  auth_to_terminal (all-traces): verified (1458 steps)
  auth_to_bank_minimal (all-traces): verified (103 steps)
  auth_to_bank (all-traces): verified (639 steps)
  secrecy_MK (all-traces): verified (12 steps)
  secrecy_PIN (all-traces): verified (4 steps)
  secrecy_PAN (all-traces): falsified - found trace (7 steps)

==============================================================================
