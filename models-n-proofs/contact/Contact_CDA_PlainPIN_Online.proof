theory Contact_CDA_PlainPIN_Online begin

// Function signature and definition of the equational theory E

builtins: xor
functions: MAC/2, MAC_arpc/2, NEq/2, adec/2, aenc/2, f/2, fst/1, h/1,
           p8/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) Terminal_Bank_Network:
   [ Send( S, R, channelID, msg ) ] --> [ Recv( S, R, channelID, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Generate_ATC:
   [ Fr( ~ATC ) ] --> [ !ATC( ~ATC ), Out( ~ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_CA:
   [ Fr( ~privkCA ) ]
  --[ Once( $CA ), Role( $CA, 'CA' ) ]->
   [
   !LtkCA( $CA, ~privkCA ),
   !CertCA( $CA,
            <<'01', $CA, pk(~privkCA), $CA>, 
             sign(<'01', $CA, pk(~privkCA), $CA>, ~privkCA)>
   ),
   Out( pk(~privkCA) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_Bank:
   [ Fr( ~privkBank ), !LtkCA( $CA, ~privkCA ) ]
  --[ Once( $Bank ), Role( $Bank, 'Bank' ) ]->
   [
   !LtkBank( $Bank, ~privkBank ),
   !CertBank( $Bank,
              <<'02', $Bank, pk(~privkBank), $CA>, 
               sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)>
   ),
   !IssuingCA( $Bank, $CA ), Out( pk(~privkBank) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_Card:
   [
   Fr( ~PAN ), Fr( ~expDate ), Fr( ~MK ), !LtkBank( $Bank, ~privkBank ),
   !CertBank( $Bank, certBank ), !IssuingCA( $Bank, $CA ), In( <auth, CVM> )
   ]
  --[
  Role( ~PAN, 'Card' ), SecretPAN( ~PAN ), SecretMK( ~MK ), Honest( $CA ),
  Honest( $Bank ), Honest( ~PAN )
  ]->
   [
   !AIP( ~PAN, <auth, $furtherData> ), !SupportedCVM( ~PAN, CVM ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank ),
   Set_Records( ~PAN, ~expDate, $CA, certBank,
                sign(<'03', ~PAN, ~expDate, auth, $furtherData>, ~privkBank), CVM,
                <auth, $furtherData>
   ),
   Set_PIN( ~PAN, CVM, $CA, $Bank )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Set_Records_SDA:
   [
   Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM,
                <'SDA', furtherData>
   )
   ]
  -->
   [ !Records( ~PAN, <~PAN, ~expDate, $CA, certBank, SSAD, CVM> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Set_Records_NotSDA:
   [
   Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM, AIP ),
   Fr( ~privkCard ), !IssuingBank( ~PAN, $Bank ),
   !LtkBank( $Bank, ~privkBank )
   ]
  --[
  NEq( fst(AIP), 'SDA' ), SecretPrivkCard( ~privkCard ), Honest( $CA ),
  Honest( $Bank ), Honest( ~PAN )
  ]->
   [
   Out( pk(~privkCard) ), !LtkCard( ~PAN, ~privkCard ),
   !Records( ~PAN,
             <~PAN, ~expDate, $CA, certBank, 
              <<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, 
               sign(<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, ~privkBank)>, 
              CVM>
   )
   ]

  /*
  rule (modulo AC) Set_Records_NotSDA:
     [
     Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM, AIP ),
     Fr( ~privkCard ), !IssuingBank( ~PAN, $Bank ),
     !LtkBank( $Bank, ~privkBank )
     ]
    --[
    NEq( z, 'SDA' ), SecretPrivkCard( ~privkCard ), Honest( $CA ),
    Honest( $Bank ), Honest( ~PAN )
    ]->
     [
     Out( pk(~privkCard) ), !LtkCard( ~PAN, ~privkCard ),
     !Records( ~PAN,
               <~PAN, ~expDate, $CA, certBank, 
                <<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, 
                 sign(<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, ~privkBank)>, 
                CVM>
     )
     ]
    variants (modulo AC)
    1. AIP   = AIP.14
       z     = fst(AIP.14)
    
    2. AIP   = <z.17, x.21>
       z     = z.17
  */

rule (modulo E) Set_PIN:
   [ Fr( ~PIN ), Set_PIN( ~PAN, CVM, $CA, $Bank ) ]
  --[
  NEq( CVM, 'NoPIN' ), SecretPIN( ~PIN ), Honest( $CA ), Honest( $Bank ),
  Honest( ~PAN )
  ]->
   [
   !PIN( ~PAN, ~PIN ), !Entered_PIN( ~PAN, ~PIN ),
   !Entered_PIN( ~PAN, 'WrongPIN' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_CA:
   [ !LtkCA( $CA, ~privkCA ) ] --[ Compromise( $CA ) ]-> [ Out( ~privkCA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Bank:
   [ !LtkBank( $Bank, ~privkBank ) ]
  --[ Compromise( $Bank ) ]->
   [ Out( <$Bank, ~privkBank> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Card:
   [ !LtkCard( ~PAN, ~privkCard ) ]
  --[ Compromise( ~PAN ) ]->
   [ Out( <~PAN, ~privkCard> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Bank_Card_ShK:
   [ !IssuingBank( ~PAN, $Bank ), !Shk( ~PAN, ~MK ) ]
  --[ Compromise( ~MK ), Compromise( $Bank ), Compromise( ~PAN ) ]->
   [ Out( ~MK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_GPO:
   [ Fr( ~UN ) ]
  --[
  OneTerminal( ), Role( $Terminal, 'Terminal' ),
  StartTransaction( $Terminal, ~UN )
  ]->
   [
   Out( <'GET_PROCESSING_OPTIONS', $amount, 'Switzerland', 'CHF', 'YYMMDD', 
         'Purchase', ~UN>
   ),
   Terminal_Sent_GPO( $Terminal,
                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GPO:
   [ In( <'GET_PROCESSING_OPTIONS', PDOL> ), !AIP( ~PAN, AIP ), !ATC( ATC )
   ]
  --[ OneCard( ), Once( <~PAN, ATC, 'Card'> ) ]->
   [ Out( <AIP, 'AFL'> ), Card_Responded_To_GPO( ~PAN, PDOL, ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_ReadRecord:
   [ Terminal_Sent_GPO( $Terminal, PDOL ), In( <AIP, 'AFL'> ) ]
  -->
   [
   Out( <'READ_RECORD', 'AFL'> ),
   Terminal_Sent_ReadRecord( $Terminal, PDOL, AIP )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_ReadRecord_NotDDA:
   [
   Card_Responded_To_GPO( ~PAN, PDOL, ATC ), !AIP( ~PAN, AIP ),
   !Records( ~PAN, records ), In( <'READ_RECORD', 'AFL'> )
   ]
  --[ NEq( fst(AIP), 'DDA' ) ]->
   [ Out( records ), Card_Ready_For_CVM( ~PAN, PDOL, ATC ) ]

  /*
  rule (modulo AC) Card_Responds_To_ReadRecord_NotDDA:
     [
     Card_Responded_To_GPO( ~PAN, PDOL, ATC ), !AIP( ~PAN, AIP ),
     !Records( ~PAN, records ), In( <'READ_RECORD', 'AFL'> )
     ]
    --[ NEq( z, 'DDA' ) ]->
     [ Out( records ), Card_Ready_For_CVM( ~PAN, PDOL, ATC ) ]
    variants (modulo AC)
    1. AIP   = AIP.10
       z     = fst(AIP.10)
    
    2. AIP   = <z.15, x.21>
       z     = z.15
  */

rule (modulo E) Card_Responds_To_ReadRecord_DDA:
   [
   Card_Responded_To_GPO( ~PAN, PDOL, ATC ), !Records( ~PAN, records ),
   !AIP( ~PAN, <'DDA', furtherData> ), In( <'READ_RECORD', 'AFL'> )
   ]
  -->
   [ Out( records ), Card_Ready_For_DDA( ~PAN, PDOL, ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_Records_SDA:
   [
   Terminal_Sent_ReadRecord( $Terminal, PDOL, <'SDA', furtherData> ),
   In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, SSAD, CVM
       >
   ),
   !IssuingCA( $Bank, $CA ),
   !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
   ]
  --[
  Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
  Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
  Eq( verify(SSAD, <'03', ~PAN, expDate, 'SDA', furtherData>, pubkBank),
      true
  )
  ]->
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                           <'SDA', furtherData>, pubkBank, 'Null', CVM
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_Records_SDA:
     [
     Terminal_Sent_ReadRecord( $Terminal, PDOL, <'SDA', furtherData> ),
     In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, SSAD, CVM
         >
     ),
     !IssuingCA( $Bank, $CA ),
     !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ) ]->
     [
     Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                             <'SDA', furtherData>, pubkBank, 'Null', CVM
     )
     ]
    variants (modulo AC)
    1. $Bank = $Bank.34
       $CA   = $CA.35
       ~PAN  = ~PAN.37
       SSAD  = SSAD.40
       expDate
             = expDate.41
       furtherData
             = furtherData.42
       pubkBank
             = pubkBank.43
       pubkCA
             = pubkCA.44
       sign1 = sign1.45
       sign2 = sign2.46
       z     = verify(sign1.45, <'01', $CA.35, pubkCA.44, $CA.35>, pubkCA.44)
       z.1   = verify(sign2.46, <'02', $Bank.34, pubkBank.43, $CA.35>,
                      pubkCA.44)
       z.2   = verify(SSAD.40,
                      <'03', ~PAN.37, expDate.41, 'SDA', furtherData.42>, pubkBank.43)
    
    2. $Bank = $Bank.87
       $CA   = $CA.88
       ~PAN  = ~PAN.90
       SSAD  = sign(<'03', ~PAN.90, expDate.94, 'SDA', furtherData.95>, x.172)
       expDate
             = expDate.94
       furtherData
             = furtherData.95
       pubkBank
             = pk(x.172)
       pubkCA
             = pubkCA.97
       sign1 = sign1.98
       sign2 = sign2.99
       z     = verify(sign1.98, <'01', $CA.88, pubkCA.97, $CA.88>, pubkCA.97)
       z.1   = verify(sign2.99, <'02', $Bank.87, pk(x.172), $CA.88>, pubkCA.97)
       z.2   = true
    
    3. $Bank = $Bank.90
       $CA   = $CA.91
       ~PAN  = ~PAN.93
       SSAD  = sign(<'03', ~PAN.93, expDate.97, 'SDA', furtherData.98>, x.177)
       expDate
             = expDate.97
       furtherData
             = furtherData.98
       pubkBank
             = pk(x.177)
       pubkCA
             = pk(x.178)
       sign1 = sign(<'01', $CA.91, pk(x.178), $CA.91>, x.178)
       sign2 = sign2.102
       z     = true
       z.1   = verify(sign2.102, <'02', $Bank.90, pk(x.177), $CA.91>, pk(x.178))
       z.2   = true
    
    4. $Bank = $Bank.91
       $CA   = $CA.92
       ~PAN  = ~PAN.94
       SSAD  = SSAD.97
       expDate
             = expDate.98
       furtherData
             = furtherData.99
       pubkBank
             = pubkBank.100
       pubkCA
             = pk(x.180)
       sign1 = sign(<'01', $CA.92, pk(x.180), $CA.92>, x.180)
       sign2 = sign2.103
       z     = true
       z.1   = verify(sign2.103, <'02', $Bank.91, pubkBank.100, $CA.92>,
                      pk(x.180))
       z.2   = verify(SSAD.97,
                      <'03', ~PAN.94, expDate.98, 'SDA', furtherData.99>, pubkBank.100)
    
    5. $Bank = $Bank.91
       $CA   = $CA.92
       ~PAN  = ~PAN.94
       SSAD  = sign(<'03', ~PAN.94, expDate.98, 'SDA', furtherData.99>, x.179)
       expDate
             = expDate.98
       furtherData
             = furtherData.99
       pubkBank
             = pk(x.179)
       pubkCA
             = pk(x.180)
       sign1 = sign1.102
       sign2 = sign(<'02', $Bank.91, pk(x.179), $CA.92>, x.180)
       z     = verify(sign1.102, <'01', $CA.92, pk(x.180), $CA.92>, pk(x.180))
       z.1   = true
       z.2   = true
    
    6. $Bank = $Bank.91
       $CA   = $CA.92
       ~PAN  = ~PAN.94
       SSAD  = sign(<'03', ~PAN.94, expDate.98, 'SDA', furtherData.99>, x.179)
       expDate
             = expDate.98
       furtherData
             = furtherData.99
       pubkBank
             = pk(x.179)
       pubkCA
             = pk(x.180)
       sign1 = sign(<'01', $CA.92, pk(x.180), $CA.92>, x.180)
       sign2 = sign(<'02', $Bank.91, pk(x.179), $CA.92>, x.180)
       z     = true
       z.1   = true
       z.2   = true
    
    7. $Bank = $Bank.92
       $CA   = $CA.93
       ~PAN  = ~PAN.95
       SSAD  = SSAD.98
       expDate
             = expDate.99
       furtherData
             = furtherData.100
       pubkBank
             = pubkBank.101
       pubkCA
             = pk(x.182)
       sign1 = sign1.103
       sign2 = sign(<'02', $Bank.92, pubkBank.101, $CA.93>, x.182)
       z     = verify(sign1.103, <'01', $CA.93, pk(x.182), $CA.93>, pk(x.182))
       z.1   = true
       z.2   = verify(SSAD.98,
                      <'03', ~PAN.95, expDate.99, 'SDA', furtherData.100>, pubkBank.101)
    
    8. $Bank = $Bank.92
       $CA   = $CA.93
       ~PAN  = ~PAN.95
       SSAD  = SSAD.98
       expDate
             = expDate.99
       furtherData
             = furtherData.100
       pubkBank
             = pubkBank.101
       pubkCA
             = pk(x.182)
       sign1 = sign(<'01', $CA.93, pk(x.182), $CA.93>, x.182)
       sign2 = sign(<'02', $Bank.92, pubkBank.101, $CA.93>, x.182)
       z     = true
       z.1   = true
       z.2   = verify(SSAD.98,
                      <'03', ~PAN.95, expDate.99, 'SDA', furtherData.100>, pubkBank.101)
  */

rule (modulo E) Terminal_Receives_Records_CDA:
   [
   Terminal_Sent_ReadRecord( $Terminal, PDOL, <'CDA', furtherData> ),
   In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
        <<'04', ~PAN, pubkCard, $Bank, CVM, 'CDA', furtherData>, sign3>, CVM>
   ),
   !IssuingCA( $Bank, $CA ),
   !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
   ]
  --[
  Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
  Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
  Eq( verify(sign3, <'04', ~PAN, pubkCard, $Bank, CVM, 'CDA', furtherData>,
             pubkBank),
      true
  )
  ]->
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                           <'CDA', furtherData>, pubkBank, pubkCard, CVM
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_Records_CDA:
     [
     Terminal_Sent_ReadRecord( $Terminal, PDOL, <'CDA', furtherData> ),
     In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
          <<'04', ~PAN, pubkCard, $Bank, CVM, 'CDA', furtherData>, sign3>, CVM>
     ),
     !IssuingCA( $Bank, $CA ),
     !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ) ]->
     [
     Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                             <'CDA', furtherData>, pubkBank, pubkCard, CVM
     )
     ]
    variants (modulo AC)
    1. $Bank = $Bank.36
       $CA   = $CA.37
       ~PAN  = ~PAN.39
       CVM   = CVM.40
       furtherData
             = furtherData.43
       pubkBank
             = pubkBank.44
       pubkCA
             = pubkCA.45
       pubkCard
             = pubkCard.46
       sign1 = sign1.47
       sign2 = sign2.48
       sign3 = sign3.49
       z     = verify(sign1.47, <'01', $CA.37, pubkCA.45, $CA.37>, pubkCA.45)
       z.1   = verify(sign2.48, <'02', $Bank.36, pubkBank.44, $CA.37>,
                      pubkCA.45)
       z.2   = verify(sign3.49,
                      <'04', ~PAN.39, pubkCard.46, $Bank.36, CVM.40, 'CDA', furtherData.43>,
                      pubkBank.44)
    
    2. $Bank = $Bank.94
       $CA   = $CA.95
       ~PAN  = ~PAN.97
       CVM   = CVM.98
       furtherData
             = furtherData.101
       pubkBank
             = pubkBank.102
       pubkCA
             = pk(x.186)
       pubkCard
             = pubkCard.104
       sign1 = sign(<'01', $CA.95, pk(x.186), $CA.95>, x.186)
       sign2 = sign2.106
       sign3 = sign3.107
       z     = true
       z.1   = verify(sign2.106, <'02', $Bank.94, pubkBank.102, $CA.95>,
                      pk(x.186))
       z.2   = verify(sign3.107,
                      <'04', ~PAN.97, pubkCard.104, $Bank.94, CVM.98, 'CDA', furtherData.101>,
                      pubkBank.102)
    
    3. $Bank = $Bank.94
       $CA   = $CA.95
       ~PAN  = ~PAN.97
       CVM   = CVM.98
       furtherData
             = furtherData.101
       pubkBank
             = pk(x.186)
       pubkCA
             = pubkCA.103
       pubkCard
             = pubkCard.104
       sign1 = sign1.105
       sign2 = sign2.106
       sign3 = sign(<'04', ~PAN.97, pubkCard.104, $Bank.94, CVM.98, 'CDA', 
                     furtherData.101>,
                    x.186)
       z     = verify(sign1.105, <'01', $CA.95, pubkCA.103, $CA.95>, pubkCA.103)
       z.1   = verify(sign2.106, <'02', $Bank.94, pk(x.186), $CA.95>,
                      pubkCA.103)
       z.2   = true
    
    4. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pubkBank.103
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign1.106
       sign2 = sign(<'02', $Bank.95, pubkBank.103, $CA.96>, x.188)
       sign3 = sign3.108
       z     = verify(sign1.106, <'01', $CA.96, pk(x.188), $CA.96>, pk(x.188))
       z.1   = true
       z.2   = verify(sign3.108,
                      <'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'CDA', furtherData.102>,
                      pubkBank.103)
    
    5. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pubkBank.103
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign(<'02', $Bank.95, pubkBank.103, $CA.96>, x.188)
       sign3 = sign3.108
       z     = true
       z.1   = true
       z.2   = verify(sign3.108,
                      <'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'CDA', furtherData.102>,
                      pubkBank.103)
    
    6. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign1.106
       sign2 = sign(<'02', $Bank.95, pk(x.187), $CA.96>, x.188)
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'CDA', 
                     furtherData.102>,
                    x.187)
       z     = verify(sign1.106, <'01', $CA.96, pk(x.188), $CA.96>, pk(x.188))
       z.1   = true
       z.2   = true
    
    7. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign2.107
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'CDA', 
                     furtherData.102>,
                    x.187)
       z     = true
       z.1   = verify(sign2.107, <'02', $Bank.95, pk(x.187), $CA.96>, pk(x.188))
       z.2   = true
    
    8. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign(<'02', $Bank.95, pk(x.187), $CA.96>, x.188)
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'CDA', 
                     furtherData.102>,
                    x.187)
       z     = true
       z.1   = true
       z.2   = true
  */

rule (modulo E) Terminal_Receives_Records_DDA:
   [
   Terminal_Sent_ReadRecord( $Terminal, PDOL, <'DDA', furtherData> ),
   !IssuingCA( $Bank, $CA ),
   In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
        <<'04', ~PAN, pubkCard, $Bank, CVM, 'DDA', furtherData>, sign3>, CVM>
   ),
   !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
   ]
  --[
  Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
  Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
  Eq( verify(sign3, <'04', ~PAN, pubkCard, $Bank, CVM, 'DDA', furtherData>,
             pubkBank),
      true
  )
  ]->
   [
   Terminal_Ready_For_DDA( $Terminal, ~PAN, $Bank, $CA, PDOL,
                           <'DDA', furtherData>, pubkBank, pubkCard, CVM
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_Records_DDA:
     [
     Terminal_Sent_ReadRecord( $Terminal, PDOL, <'DDA', furtherData> ),
     !IssuingCA( $Bank, $CA ),
     In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
          <<'04', ~PAN, pubkCard, $Bank, CVM, 'DDA', furtherData>, sign3>, CVM>
     ),
     !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ) ]->
     [
     Terminal_Ready_For_DDA( $Terminal, ~PAN, $Bank, $CA, PDOL,
                             <'DDA', furtherData>, pubkBank, pubkCard, CVM
     )
     ]
    variants (modulo AC)
    1. $Bank = $Bank.36
       $CA   = $CA.37
       ~PAN  = ~PAN.39
       CVM   = CVM.40
       furtherData
             = furtherData.43
       pubkBank
             = pubkBank.44
       pubkCA
             = pubkCA.45
       pubkCard
             = pubkCard.46
       sign1 = sign1.47
       sign2 = sign2.48
       sign3 = sign3.49
       z     = verify(sign1.47, <'01', $CA.37, pubkCA.45, $CA.37>, pubkCA.45)
       z.1   = verify(sign2.48, <'02', $Bank.36, pubkBank.44, $CA.37>,
                      pubkCA.45)
       z.2   = verify(sign3.49,
                      <'04', ~PAN.39, pubkCard.46, $Bank.36, CVM.40, 'DDA', furtherData.43>,
                      pubkBank.44)
    
    2. $Bank = $Bank.94
       $CA   = $CA.95
       ~PAN  = ~PAN.97
       CVM   = CVM.98
       furtherData
             = furtherData.101
       pubkBank
             = pubkBank.102
       pubkCA
             = pk(x.186)
       pubkCard
             = pubkCard.104
       sign1 = sign(<'01', $CA.95, pk(x.186), $CA.95>, x.186)
       sign2 = sign2.106
       sign3 = sign3.107
       z     = true
       z.1   = verify(sign2.106, <'02', $Bank.94, pubkBank.102, $CA.95>,
                      pk(x.186))
       z.2   = verify(sign3.107,
                      <'04', ~PAN.97, pubkCard.104, $Bank.94, CVM.98, 'DDA', furtherData.101>,
                      pubkBank.102)
    
    3. $Bank = $Bank.94
       $CA   = $CA.95
       ~PAN  = ~PAN.97
       CVM   = CVM.98
       furtherData
             = furtherData.101
       pubkBank
             = pk(x.186)
       pubkCA
             = pubkCA.103
       pubkCard
             = pubkCard.104
       sign1 = sign1.105
       sign2 = sign2.106
       sign3 = sign(<'04', ~PAN.97, pubkCard.104, $Bank.94, CVM.98, 'DDA', 
                     furtherData.101>,
                    x.186)
       z     = verify(sign1.105, <'01', $CA.95, pubkCA.103, $CA.95>, pubkCA.103)
       z.1   = verify(sign2.106, <'02', $Bank.94, pk(x.186), $CA.95>,
                      pubkCA.103)
       z.2   = true
    
    4. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pubkBank.103
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign1.106
       sign2 = sign(<'02', $Bank.95, pubkBank.103, $CA.96>, x.188)
       sign3 = sign3.108
       z     = verify(sign1.106, <'01', $CA.96, pk(x.188), $CA.96>, pk(x.188))
       z.1   = true
       z.2   = verify(sign3.108,
                      <'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'DDA', furtherData.102>,
                      pubkBank.103)
    
    5. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pubkBank.103
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign(<'02', $Bank.95, pubkBank.103, $CA.96>, x.188)
       sign3 = sign3.108
       z     = true
       z.1   = true
       z.2   = verify(sign3.108,
                      <'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'DDA', furtherData.102>,
                      pubkBank.103)
    
    6. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign1.106
       sign2 = sign(<'02', $Bank.95, pk(x.187), $CA.96>, x.188)
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'DDA', 
                     furtherData.102>,
                    x.187)
       z     = verify(sign1.106, <'01', $CA.96, pk(x.188), $CA.96>, pk(x.188))
       z.1   = true
       z.2   = true
    
    7. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign2.107
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'DDA', 
                     furtherData.102>,
                    x.187)
       z     = true
       z.1   = verify(sign2.107, <'02', $Bank.95, pk(x.187), $CA.96>, pk(x.188))
       z.2   = true
    
    8. $Bank = $Bank.95
       $CA   = $CA.96
       ~PAN  = ~PAN.98
       CVM   = CVM.99
       furtherData
             = furtherData.102
       pubkBank
             = pk(x.187)
       pubkCA
             = pk(x.188)
       pubkCard
             = pubkCard.105
       sign1 = sign(<'01', $CA.96, pk(x.188), $CA.96>, x.188)
       sign2 = sign(<'02', $Bank.95, pk(x.187), $CA.96>, x.188)
       sign3 = sign(<'04', ~PAN.98, pubkCard.105, $Bank.95, CVM.99, 'DDA', 
                     furtherData.102>,
                    x.187)
       z     = true
       z.1   = true
       z.2   = true
  */

rule (modulo E) Terminal_Sends_InternalAuthenticate:
   [
   Terminal_Ready_For_DDA( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                           CVM
   )
   ]
  --[ ActiveTransaction( $Terminal, ~UN ) ]->
   [
   Out( <'INTERNAL_AUTHENTICATE', ~UN> ),
   Terminal_Sent_InternalAuthenticate( $Terminal, ~PAN, $Bank, $CA,
                                       <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                                       CVM
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_InternalAuthenticate:
   [
   Card_Ready_For_DDA( ~PAN, PDOL, ATC ), Fr( ~nc ),
   !LtkCard( ~PAN, ~privkCard ), In( <'INTERNAL_AUTHENTICATE', DDOL> )
   ]
  -->
   [
   Out( <~nc, sign(<'05', ~nc, DDOL>, ~privkCard)> ),
   Card_Ready_For_CVM( ~PAN, PDOL, ATC )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_InternalAuthenticate_Response:
   [
   Terminal_Sent_InternalAuthenticate( $Terminal, ~PAN, $Bank, $CA,
                                       <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                                       CVM
   ),
   In( <nc, SDAD> )
   ]
  --[
  ActiveTransaction( $Terminal, ~UN ),
  Eq( verify(SDAD, <'05', nc, ~UN>, pubkCard), true )
  ]->
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                           CVM
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_InternalAuthenticate_Response:
     [
     Terminal_Sent_InternalAuthenticate( $Terminal, ~PAN, $Bank, $CA,
                                         <$amount, country, currency, date, type, ~UN>, AIP, pubkBank,
                                         pubkCard, CVM
     ),
     In( <nc, SDAD> )
     ]
    --[ ActiveTransaction( $Terminal, ~UN ), Eq( z, true ) ]->
     [
     Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                             <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                             CVM
     )
     ]
    variants (modulo AC)
    1. ~UN   = ~UN.18
       SDAD  = SDAD.18
       nc    = nc.18
       pubkCard
             = pubkCard.18
       z     = verify(SDAD.18, <'05', nc.18, ~UN.18>, pubkCard.18)
    
    2. ~UN   = ~x.18
       SDAD  = sign(<'05', x.21, ~x.18>, x.22)
       nc    = x.21
       pubkCard
             = pk(x.22)
       z     = true
  */

rule (modulo E) Terminal_Processes_CVM_NoPIN:
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP, pubkBank,
                           pubkCard, 'NoPIN'
   )
   ]
  -->
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                                  pubkBank, pubkCard, 'NoPIN', 'Null'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Processes_CVM_NoPIN:
   [ Card_Ready_For_CVM( ~PAN, PDOL, ATC ), !SupportedCVM( ~PAN, CVM ) ]
  --[ NEq( CVM, 'OnlinePIN' ) ]->
   [ Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC, 'NoPIN' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Processes_CVM_OnlinePIN:
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                           'OnlinePIN'
   ),
   !Entered_PIN( ~PAN, PIN )
   ]
  --[ ActiveTransaction( $Terminal, ~UN ) ]->
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA,
                                  <$amount, country, currency, date, type, ~UN>, AIP, pubkBank, pubkCard,
                                  'OnlinePIN', aenc(PIN, pubkBank)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Processes_CVM_OnlinePIN:
   [
   Card_Ready_For_CVM( ~PAN, PDOL, ATC ), !SupportedCVM( ~PAN, 'OnlinePIN' )
   ]
  -->
   [ Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC, 'OnlinePIN' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Processes_CVM_PlainPIN:
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP, pubkBank,
                           pubkCard, 'PlainPIN'
   ),
   !Entered_PIN( ~PAN, PIN )
   ]
  -->
   [
   Out( <'VERIFY', PIN> ),
   Terminal_Sent_Verify( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP, pubkBank,
                         pubkCard, 'PlainPIN'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Verifies_PlainPIN:
   [
   Card_Ready_For_CVM( ~PAN, PDOL, ATC ), In( <'VERIFY', PIN> ),
   !SupportedCVM( ~PAN, 'PlainPIN' ), !PIN( ~PAN, PIN )
   ]
  -->
   [ Out( '9000' ), Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC, 'PlainPIN' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_Verify_Response:
   [
   Terminal_Sent_Verify( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP, pubkBank,
                         pubkCard, CVM
   ),
   In( '9000' )
   ]
  -->
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                                  pubkBank, pubkCard, CVM, 'Null'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Processes_CVM_EncPIN:
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP, pubkBank,
                           pubkCard, 'EncPIN'
   )
   ]
  --[ NEq( fst(AIP), 'SDA' ) ]->
   [
   Out( 'GET_CHALLENGE' ),
   Terminal_Sent_GetChallenge( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                               pubkBank, pubkCard
   )
   ]

  /*
  rule (modulo AC) Terminal_Processes_CVM_EncPIN:
     [
     Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP, pubkBank,
                             pubkCard, 'EncPIN'
     )
     ]
    --[ NEq( z, 'SDA' ) ]->
     [
     Out( 'GET_CHALLENGE' ),
     Terminal_Sent_GetChallenge( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                                 pubkBank, pubkCard
     )
     ]
    variants (modulo AC)
    1. AIP   = AIP.13
       z     = fst(AIP.13)
    
    2. AIP   = <z.18, x.24>
       z     = z.18
  */

rule (modulo E) Card_Responds_To_GetChallenge:
   [
   Card_Ready_For_CVM( ~PAN, PDOL, ATC ), !AIP( ~PAN, AIP ),
   !SupportedCVM( ~PAN, 'EncPIN' ), In( 'GET_CHALLENGE' ), Fr( ~nc )
   ]
  --[ NEq( fst(AIP), 'SDA' ) ]->
   [ Out( ~nc ), Card_Responded_To_GetChallenge( ~PAN, ~nc, PDOL, ATC ) ]

  /*
  rule (modulo AC) Card_Responds_To_GetChallenge:
     [
     Card_Ready_For_CVM( ~PAN, PDOL, ATC ), !AIP( ~PAN, AIP ),
     !SupportedCVM( ~PAN, 'EncPIN' ), In( 'GET_CHALLENGE' ), Fr( ~nc )
     ]
    --[ NEq( z, 'SDA' ) ]->
     [ Out( ~nc ), Card_Responded_To_GetChallenge( ~PAN, ~nc, PDOL, ATC ) ]
    variants (modulo AC)
    1. AIP   = AIP.10
       z     = fst(AIP.10)
    
    2. AIP   = <z.15, x.21>
       z     = z.15
  */

rule (modulo E) Terminal_Sends_Verify_EncryptedPIN:
   [
   Terminal_Sent_GetChallenge( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                               pubkBank, pubkCard
   ),
   !Entered_PIN( ~PAN, PIN ), In( nc )
   ]
  -->
   [
   Out( <'VERIFY', aenc(<'7F', PIN, nc>, pubkCard)> ),
   Terminal_Sent_Verify( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP, pubkBank,
                         pubkCard, 'EncPIN'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Verifies_EncPIN:
   [
   Card_Responded_To_GetChallenge( ~PAN, ~nc, PDOL, ATC ),
   !LtkCard( ~PAN, ~privkCard ), !PIN( ~PAN, PIN ),
   In( <'VERIFY', aenc(<'7F', PIN, ~nc>, pk(~privkCard))> )
   ]
  -->
   [ Out( '9000' ), Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC, 'EncPIN' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_GenerateAC_NoCDA:
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                                  pubkBank, pubkCard, CVM, encPIN
   ),
   In( acType )
   ]
  --[ NEq( fst(AIP), 'CDA' ) ]->
   [
   Out( <'GENERATE_AC', acType, 'NoCDA', 'TVR', CVM, 'HHMMSS'> ),
   Terminal_Sent_GenerateAC_NoCDA( $Terminal, ~PAN, $Bank, $CA,
                                   <PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, pubkBank, pubkCard, CVM, encPIN,
                                   acType
   )
   ]

  /*
  rule (modulo AC) Terminal_Sends_GenerateAC_NoCDA:
     [
     Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                                    pubkBank, pubkCard, CVM, encPIN
     ),
     In( acType )
     ]
    --[ NEq( z, 'CDA' ) ]->
     [
     Out( <'GENERATE_AC', acType, 'NoCDA', 'TVR', CVM, 'HHMMSS'> ),
     Terminal_Sent_GenerateAC_NoCDA( $Terminal, ~PAN, $Bank, $CA,
                                     <PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, pubkBank, pubkCard, CVM, encPIN,
                                     acType
     )
     ]
    variants (modulo AC)
    1. AIP   = AIP.18
       z     = fst(AIP.18)
    
    2. AIP   = <z.27, x.37>
       z     = z.27
  */

rule (modulo E) Terminal_Sends_GenerateAC_CDA:
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL,
                                  <'CDA', furtherData>, pubkBank, pubkCard, CVM, encPIN
   ),
   In( acType )
   ]
  -->
   [
   Out( <'GENERATE_AC', acType, 'CDA', 'TVR', CVM, 'HHMMSS'> ),
   Terminal_Sent_GenerateAC_CDA( $Terminal, ~PAN, $Bank, $CA,
                                 <PDOL, 'TVR', CVM, 'HHMMSS'>, <'CDA', furtherData>, pubkBank, pubkCard,
                                 CVM, encPIN, acType
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GenerateAC_NoCDA:
   [
   Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC, CVM ), !AIP( ~PAN, AIP ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank ),
   In( <'GENERATE_AC', CID, 'NoCDA', CDOL1> )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, 
            MAC(f(~MK, ATC), <<PDOL, CDOL1>, AIP, ATC, 'IAD', CID>), 'IAD', CID>
  ),
  Running( ~PAN, $Bank,
           <'Card', 'Bank', ~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, 
            MAC(f(~MK, ATC), <<PDOL, CDOL1>, AIP, ATC, 'IAD', CID>), 'IAD', CID>
  )
  ]->
   [
   Card_Produced_AC( ~PAN, 'Null', CID,
                     <~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, 
                      MAC(f(~MK, ATC), <<PDOL, CDOL1>, AIP, ATC, 'IAD', CID>), 'IAD', CID>
   ),
   Out( <CID, ATC, MAC(f(~MK, ATC), <<PDOL, CDOL1>, AIP, ATC, 'IAD', CID>), 
         'IAD', CID>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GenerateAC_CDA:
   [
   Card_Ready_For_Cryptogram( ~PAN,
                              <amount, country, currency, date, type, UN>, ATC, CVM
   ),
   !LtkCard( ~PAN, ~privkCard ), !AIP( ~PAN, <'CDA', furtherData> ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank ), Fr( ~nc ),
   In( <'GENERATE_AC', CID, 'CDA', CDOL1> )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, <'CDA', furtherData>, CVM, 
            <<amount, country, currency, date, type, UN>, CDOL1>, ATC, 
            MAC(f(~MK, ATC),
                <<<amount, country, currency, date, type, UN>, CDOL1>, 
                 <'CDA', furtherData>, ATC, 'IAD', CID>), 
            'IAD', CID>
  ),
  Running( ~PAN, $Bank,
           <'Card', 'Bank', ~PAN, <'CDA', furtherData>, CVM, 
            <<amount, country, currency, date, type, UN>, CDOL1>, ATC, 
            MAC(f(~MK, ATC),
                <<<amount, country, currency, date, type, UN>, CDOL1>, 
                 <'CDA', furtherData>, ATC, 'IAD', CID>), 
            'IAD', CID>
  )
  ]->
   [
   Card_Produced_AC( ~PAN, ~nc, CID,
                     <~PAN, <'CDA', furtherData>, CVM, 
                      <<amount, country, currency, date, type, UN>, CDOL1>, ATC, 
                      MAC(f(~MK, ATC),
                          <<<amount, country, currency, date, type, UN>, CDOL1>, 
                           <'CDA', furtherData>, ATC, 'IAD', CID>), 
                      'IAD', CID>
   ),
   Out( <CID, ATC, 
         MAC(f(~MK, ATC),
             <<<amount, country, currency, date, type, UN>, CDOL1>, 
              <'CDA', furtherData>, ATC, 'IAD', CID>), 
         <~nc, 
          sign(<'05', ~nc, CID, 
                MAC(f(~MK, ATC),
                    <<<amount, country, currency, date, type, UN>, CDOL1>, 
                     <'CDA', furtherData>, ATC, 'IAD', CID>), 
                h(<<<amount, country, currency, date, type, UN>, CDOL1>, CID, ATC, 
                   MAC(f(~MK, ATC),
                       <<<amount, country, currency, date, type, UN>, CDOL1>, 
                        <'CDA', furtherData>, ATC, 'IAD', CID>), 
                   'IAD', CID>), 
                UN>,
               ~privkCard)
         >, 
         'IAD', CID>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_AC_NoCDA:
   [
   Terminal_Sent_GenerateAC_NoCDA( $Terminal, ~PAN, $Bank, $CA,
                                   <<$amount, country, currency, date, type, ~UN>, CDOL1>, AIP, pubkBank,
                                   pubkCard, CVM, encPIN, acType
   ),
   In( <CID, ATC, AC, 'IAD', CID> ), Fr( ~channelID )
   ]
  --[
  ActiveTransaction( $Terminal, ~UN ),
  Compatible_CID_acType( CID, acType ), Compatible_CID_CVM( CID, CVM ),
  Compatible_Auth_CVM( fst(AIP), CVM ),
  Running( $Terminal, $Bank,
           <'Terminal', 'Bank', ~PAN, AIP, CVM, 
            <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, 'IAD', 
            CID>
  )
  ]->
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, 'Null', CID,
                         <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
                          ATC, AC, 'IAD', CID>,
                         ~channelID, pubkCard
   ),
   Send( $Terminal, $Bank, <~channelID, '1'>,
         <
          <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
           ATC, AC, 'IAD', CID>, 
          encPIN>
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_AC_NoCDA:
     [
     Terminal_Sent_GenerateAC_NoCDA( $Terminal, ~PAN, $Bank, $CA,
                                     <<$amount, country, currency, date, type, ~UN>, CDOL1>, AIP, pubkBank,
                                     pubkCard, CVM, encPIN, acType
     ),
     In( <CID, ATC, AC, 'IAD', CID> ), Fr( ~channelID )
     ]
    --[
    ActiveTransaction( $Terminal, ~UN ),
    Compatible_CID_acType( CID, acType ), Compatible_CID_CVM( CID, CVM ),
    Compatible_Auth_CVM( z, CVM ),
    Running( $Terminal, $Bank,
             <'Terminal', 'Bank', ~PAN, AIP, CVM, 
              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, 'IAD', 
              CID>
    )
    ]->
     [
     Terminal_Received_AC( $Terminal, $Bank, $CA, 'Null', CID,
                           <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
                            ATC, AC, 'IAD', CID>,
                           ~channelID, pubkCard
     ),
     Send( $Terminal, $Bank, <~channelID, '1'>,
           <
            <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
             ATC, AC, 'IAD', CID>, 
            encPIN>
     )
     ]
    variants (modulo AC)
    1. AIP   = AIP.27
       z     = fst(AIP.27)
    
    2. AIP   = <z.40, x.54>
       z     = z.40
  */

rule (modulo E) Terminal_Receives_AC_CDA:
   [
   Terminal_Sent_GenerateAC_CDA( $Terminal, ~PAN, $Bank, $CA,
                                 <<$amount, country, currency, date, type, ~UN>, CDOL1>, AIP, pubkBank,
                                 pubkCard, CVM, encPIN, acType
   ),
   In( <CID, ATC, AC, <nc, SDAD>, 'IAD', CID> ), Fr( ~channelID )
   ]
  --[
  ActiveTransaction( $Terminal, ~UN ),
  Compatible_CID_acType( CID, acType ), Compatible_CID_CVM( CID, CVM ),
  Compatible_Auth_CVM( fst(AIP), CVM ),
  Eq( verify(SDAD,
             <'05', nc, CID, AC, 
              h(<<<$amount, country, currency, date, type, ~UN>, CDOL1>, CID, ATC, AC, 
                 'IAD', CID>), 
              ~UN>,
             pubkCard),
      true
  ),
  Running( $Terminal, $Bank,
           <'Terminal', 'Bank', ~PAN, AIP, CVM, 
            <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, 'IAD', 
            CID>
  )
  ]->
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, nc, CID,
                         <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
                          ATC, AC, 'IAD', CID>,
                         ~channelID, pubkCard
   ),
   Send( $Terminal, $Bank, <~channelID, '1'>,
         <
          <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
           ATC, AC, 'IAD', CID>, 
          encPIN>
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_AC_CDA:
     [
     Terminal_Sent_GenerateAC_CDA( $Terminal, ~PAN, $Bank, $CA,
                                   <<$amount, country, currency, date, type, ~UN>, CDOL1>, AIP, pubkBank,
                                   pubkCard, CVM, encPIN, acType
     ),
     In( <CID, ATC, AC, <nc, SDAD>, 'IAD', CID> ), Fr( ~channelID )
     ]
    --[
    ActiveTransaction( $Terminal, ~UN ),
    Compatible_CID_acType( CID, acType ), Compatible_CID_CVM( CID, CVM ),
    Compatible_Auth_CVM( z, CVM ), Eq( z.1, true ),
    Running( $Terminal, $Bank,
             <'Terminal', 'Bank', ~PAN, AIP, CVM, 
              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, 'IAD', 
              CID>
    )
    ]->
     [
     Terminal_Received_AC( $Terminal, $Bank, $CA, nc, CID,
                           <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
                            ATC, AC, 'IAD', CID>,
                           ~channelID, pubkCard
     ),
     Send( $Terminal, $Bank, <~channelID, '1'>,
           <
            <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
             ATC, AC, 'IAD', CID>, 
            encPIN>
     )
     ]
    variants (modulo AC)
    1. $amount
             = $amount.48
       ~UN   = ~UN.50
       AC    = AC.52
       AIP   = AIP.53
       ATC   = ATC.54
       CDOL1 = CDOL1.55
       CID   = CID.56
       SDAD  = SDAD.58
       country
             = country.60
       currency
             = currency.61
       date  = date.62
       nc    = nc.64
       pubkCard
             = pubkCard.66
       type  = type.67
       z     = fst(AIP.53)
       z.1   = verify(SDAD.58,
                      <'05', nc.64, CID.56, AC.52, 
                       h(<
                          <<$amount.48, country.60, currency.61, date.62, type.67, ~UN.50>, 
                           CDOL1.55>, 
                          CID.56, ATC.54, AC.52, 'IAD', CID.56>), 
                       ~UN.50>,
                      pubkCard.66)
    
    2. $amount
             = $amount.108
       ~UN   = ~UN.110
       AC    = AC.112
       AIP   = <z.130, x.211>
       ATC   = ATC.114
       CDOL1 = CDOL1.115
       CID   = CID.116
       SDAD  = SDAD.118
       country
             = country.120
       currency
             = currency.121
       date  = date.122
       nc    = nc.124
       pubkCard
             = pubkCard.126
       type  = type.127
       z     = z.130
       z.1   = verify(SDAD.118,
                      <'05', nc.124, CID.116, AC.112, 
                       h(<
                          <<$amount.108, country.120, currency.121, date.122, type.127, ~UN.110>, 
                           CDOL1.115>, 
                          CID.116, ATC.114, AC.112, 'IAD', CID.116>), 
                       ~UN.110>,
                      pubkCard.126)
    
    3. $amount
             = $amount.122
       ~UN   = ~UN.124
       AC    = AC.126
       AIP   = AIP.127
       ATC   = ATC.128
       CDOL1 = CDOL1.129
       CID   = CID.130
       SDAD  = sign(<'05', nc.138, CID.130, AC.126, 
                     h(<
                        <<$amount.122, country.134, currency.135, date.136, type.141, ~UN.124>, 
                         CDOL1.129>, 
                        CID.130, ATC.128, AC.126, 'IAD', CID.130>), 
                     ~UN.124>,
                    x.239)
       country
             = country.134
       currency
             = currency.135
       date  = date.136
       nc    = nc.138
       pubkCard
             = pk(x.239)
       type  = type.141
       z     = fst(AIP.127)
       z.1   = true
    
    4. $amount
             = $amount.123
       ~UN   = ~UN.125
       AC    = AC.127
       AIP   = <z.145, x.231>
       ATC   = ATC.129
       CDOL1 = CDOL1.130
       CID   = CID.131
       SDAD  = sign(<'05', nc.139, CID.131, AC.127, 
                     h(<
                        <<$amount.123, country.135, currency.136, date.137, type.142, ~UN.125>, 
                         CDOL1.130>, 
                        CID.131, ATC.129, AC.127, 'IAD', CID.131>), 
                     ~UN.125>,
                    x.241)
       country
             = country.135
       currency
             = currency.136
       date  = date.137
       nc    = nc.139
       pubkCard
             = pk(x.241)
       type  = type.142
       z     = z.145
       z.1   = true
  */

rule (modulo E) Bank_Receives_AC:
   [
   Recv( $Terminal, $Bank, <channelID, '1'>,
         <
          <~PAN, AIP, CVM, 
           <<amount, country, currency, date, type, UN>, TVR, CVM, time>, ATC, 
           MAC(f(~MK, ATC),
               <<<amount, country, currency, date, type, UN>, TVR, CVM, time>, AIP, 
                ATC, IAD>), 
           IAD>, 
          encPIN>
   ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank )
   ]
  --[
  Once( <~PAN, ATC, 'Bank'> ),
  OUT_1( MAC_arpc(f(~MK, ATC),
                  (
                   MAC(f(~MK, ATC),
                       <<<amount, country, currency, date, type, UN>, TVR, CVM, time>, AIP, 
                        ATC, IAD>)⊕
                   p8('ARC')))
  ),
  OneBank( )
  ]->
   [
   Bank_Checked_AC( $Bank, $Terminal,
                    <~PAN, AIP, CVM, 
                     <<amount, country, currency, date, type, UN>, TVR, CVM, time>, ATC, 
                     MAC(f(~MK, ATC),
                         <<<amount, country, currency, date, type, UN>, TVR, CVM, time>, AIP, 
                          ATC, IAD>), 
                     IAD>,
                    encPIN, channelID,
                    MAC_arpc(f(~MK, ATC),
                             (
                              MAC(f(~MK, ATC),
                                  <<<amount, country, currency, date, type, UN>, TVR, CVM, time>, AIP, 
                                   ATC, IAD>)⊕
                              p8('ARC')))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Receives_AC_Failed:
   [
   Recv( $Terminal, $Bank, <channelID, '1'>,
         <<~PAN, AIP, CVM, X, ATC, AC, IAD>, encPIN>
   ),
   !Shk( ~PAN, ~MK )
   ]
  --[
  NEq( MAC(f(~MK, ATC), <X, AIP, ATC, IAD>), AC ),
  BankDeclines( <~PAN, AIP, CVM, X, ATC, AC, IAD> )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_ChecksCVM_NotOnlinePIN:
   [
   Bank_Checked_AC( $Bank, $Terminal, <~PAN, AIP, CVM, X, ATC, AC, IAD>,
                    'Null', channelID, ARPC
   )
   ]
  --[
  NEq( CVM, 'OnlinePIN' ),
  Running( $Bank, $Terminal,
           <'Bank', 'Terminal', ~PAN, AIP, CVM, X, ATC, AC, IAD>
  )
  ]->
   [
   Bank_Checked_AC_and_CVM( $Bank, $Terminal,
                            <~PAN, AIP, CVM, X, ATC, AC, IAD>, channelID, ARPC
   ),
   Send( $Bank, $Terminal, <channelID, '2'>, <'ARC', ARPC> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Checks_OnlinePIN:
   [
   Bank_Checked_AC( $Bank, $Terminal,
                    <~PAN, AIP, 'OnlinePIN', X, ATC, AC, IAD>, aenc(PIN, pk(~privkBank)),
                    channelID, ARPC
   ),
   !LtkBank( $Bank, ~privkBank ), !PIN( ~PAN, PIN ), !Shk( ~PAN, ~MK )
   ]
  --[
  Running( $Bank, $Terminal,
           <'Bank', 'Terminal', ~PAN, AIP, 'OnlinePIN', X, ATC, AC, IAD>
  )
  ]->
   [
   Bank_Checked_AC_and_CVM( $Bank, $Terminal,
                            <~PAN, AIP, 'OnlinePIN', X, ATC, AC, IAD>, channelID, ARPC
   ),
   Send( $Bank, $Terminal, <channelID, '2'>, <'ARC', ARPC> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_ARPC:
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                         <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
                          ATC, AC, IAD>,
                         ~channelID, pubkCard
   ),
   Recv( $Bank, $Terminal, <~channelID, '2'>, <'ARC', ARPC> )
   ]
  --[ ActiveTransaction( $Terminal, ~UN ), IN_1( ARPC ) ]->
   [
   Terminal_Received_ARPC( $Terminal, $Bank, $CA, nc,
                           <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
                            ATC, AC, IAD>,
                           ~channelID, <'ARC', ARPC>, pubkCard
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_Second_GenerateAC_NoCDA:
   [
   Terminal_Received_ARPC( $Terminal, $Bank, $CA, nc,
                           <~PAN, AIP, CVM, X, ATC, AC, IAD>, ~channelID, CDOL2, pubkCard
   )
   ]
  --[ NEq( fst(AIP), 'CDA' ) ]->
   [
   Terminal_Sent_Second_GenerateAC_NoCDA( $Terminal, $Bank, $CA, nc,
                                          <~PAN, AIP, CVM, X, ATC, AC, IAD>, ~channelID, CDOL2
   ),
   Out( <'GENERATE_AC', 'TC', 'NoCDA', CDOL2> )
   ]

  /*
  rule (modulo AC) Terminal_Sends_Second_GenerateAC_NoCDA:
     [
     Terminal_Received_ARPC( $Terminal, $Bank, $CA, nc,
                             <~PAN, AIP, CVM, X, ATC, AC, IAD>, ~channelID, CDOL2, pubkCard
     )
     ]
    --[ NEq( z, 'CDA' ) ]->
     [
     Terminal_Sent_Second_GenerateAC_NoCDA( $Terminal, $Bank, $CA, nc,
                                            <~PAN, AIP, CVM, X, ATC, AC, IAD>, ~channelID, CDOL2
     ),
     Out( <'GENERATE_AC', 'TC', 'NoCDA', CDOL2> )
     ]
    variants (modulo AC)
    1. AIP   = AIP.20
       z     = fst(AIP.20)
    
    2. AIP   = <z.27, x.35>
       z     = z.27
  */

rule (modulo E) Terminal_Sends_Second_GenerateAC_CDA:
   [
   Terminal_Received_ARPC( $Terminal, $Bank, $CA, nc,
                           <~PAN, <'CDA', furtherData>, CVM, X, ATC, AC, IAD>, ~channelID, CDOL2,
                           pubkCard
   )
   ]
  -->
   [
   Terminal_Sent_Second_GenerateAC_CDA( $Terminal, $Bank, $CA, nc,
                                        <~PAN, <'CDA', furtherData>, CVM, X, ATC, AC, IAD>, ~channelID, CDOL2,
                                        pubkCard
   ),
   Out( <'GENERATE_AC', 'TC', 'CDA', CDOL2> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_Second_GenerateAC_NoCDA:
   [
   Card_Produced_AC( ~PAN, nc, 'ARQC',
                     <~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, AC, IAD>
   ),
   !IssuingBank( ~PAN, $Bank ),
   In( <'GENERATE_AC', 'TC', 'NoCDA', 'ARC', 
        MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>
   )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, AIP, CVM, 
            <PDOL, CDOL1, 'ARC', MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, ATC, 
            MAC(f(~MK, ATC),
                <<PDOL, CDOL1, 'ARC', MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, AIP, ATC, 
                 'IAD', 'TC'>), 
            'IAD', 'TC'>
  ),
  Running( ~PAN, $Bank,
           <'Card', 'Bank', ~PAN, AIP, CVM, 
            <PDOL, CDOL1, 'ARC', MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, ATC, 
            MAC(f(~MK, ATC),
                <<PDOL, CDOL1, 'ARC', MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, AIP, ATC, 
                 'IAD', 'TC'>), 
            'IAD', 'TC'>
  )
  ]->
   [
   Out( <'TC', ATC, 
         MAC(f(~MK, ATC),
             <<PDOL, CDOL1, 'ARC', MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, AIP, ATC, 
              'IAD', 'TC'>), 
         'IAD', 'TC'>
   )
   ]

  /*
  rule (modulo AC) Card_Responds_To_Second_GenerateAC_NoCDA:
     [
     Card_Produced_AC( ~PAN, nc, 'ARQC',
                       <~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, AC, IAD>
     ),
     !IssuingBank( ~PAN, $Bank ),
     In( <'GENERATE_AC', 'TC', 'NoCDA', 'ARC', MAC_arpc(f(~MK, ATC), z)> )
     ]
    --[
    Running( ~PAN, 'Terminal',
             <'Card', 'Terminal', ~PAN, AIP, CVM, 
              <PDOL, CDOL1, 'ARC', MAC_arpc(f(~MK, ATC), z)>, ATC, 
              MAC(f(~MK, ATC),
                  <<PDOL, CDOL1, 'ARC', MAC_arpc(f(~MK, ATC), z)>, AIP, ATC, 'IAD', 'TC'
                  >), 
              'IAD', 'TC'>
    ),
    Running( ~PAN, $Bank,
             <'Card', 'Bank', ~PAN, AIP, CVM, 
              <PDOL, CDOL1, 'ARC', MAC_arpc(f(~MK, ATC), z)>, ATC, 
              MAC(f(~MK, ATC),
                  <<PDOL, CDOL1, 'ARC', MAC_arpc(f(~MK, ATC), z)>, AIP, ATC, 'IAD', 'TC'
                  >), 
              'IAD', 'TC'>
    )
    ]->
     [
     Out( <'TC', ATC, 
           MAC(f(~MK, ATC),
               <<PDOL, CDOL1, 'ARC', MAC_arpc(f(~MK, ATC), z)>, AIP, ATC, 'IAD', 'TC'
               >), 
           'IAD', 'TC'>
     )
     ]
    variants (modulo AC)
    1. AC    = AC.19
       z     = (AC.19⊕p8('ARC'))
    
    2. AC    = p8('ARC')
       z     = zero
    
    3. AC    = zero
       z     = p8('ARC')
    
    4. AC    = (z.19⊕p8('ARC'))
       z     = z.19
  */

rule (modulo E) Card_Responds_To_Second_GenerateAC_CDA:
   [
   Card_Produced_AC( ~PAN, nc2, 'ARQC',
                     <~PAN, <'CDA', furtherData>, CVM, 
                      <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
   ),
   !LtkCard( ~PAN, ~privkCard ), !Shk( ~PAN, ~MK ),
   !IssuingBank( ~PAN, $Bank ), Fr( ~nc ),
   In( <'GENERATE_AC', 'TC', 'CDA', 'ARC', 
        MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>
   )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, <'CDA', furtherData>, CVM, 
            <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
             MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, 
            ATC, 
            MAC(f(~MK, ATC),
                <
                 <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                  MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, 
                 <'CDA', furtherData>, ATC, 'IAD', 'TC'>), 
            'IAD', 'TC'>
  ),
  Running( ~PAN, $Bank,
           <'Card', 'Bank', ~PAN, <'CDA', furtherData>, CVM, 
            <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
             MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, 
            ATC, 
            MAC(f(~MK, ATC),
                <
                 <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                  MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, 
                 <'CDA', furtherData>, ATC, 'IAD', 'TC'>), 
            'IAD', 'TC'>
  )
  ]->
   [
   Out( <'TC', ATC, 
         MAC(f(~MK, ATC),
             <
              <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
               MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, 
              <'CDA', furtherData>, ATC, 'IAD', 'TC'>), 
         <~nc, 
          sign(<'05', ~nc, 'TC', 
                MAC(f(~MK, ATC),
                    <
                     <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                      MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, 
                     <'CDA', furtherData>, ATC, 'IAD', 'TC'>), 
                h(<
                   <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                    MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, 
                   'TC', ATC, 
                   MAC(f(~MK, ATC),
                       <
                        <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                         MAC_arpc(f(~MK, ATC), (AC⊕p8('ARC')))>, 
                        <'CDA', furtherData>, ATC, 'IAD', 'TC'>), 
                   'IAD', 'TC'>), 
                UN>,
               ~privkCard)
         >, 
         'IAD', 'TC'>
   )
   ]

  /*
  rule (modulo AC) Card_Responds_To_Second_GenerateAC_CDA:
     [
     Card_Produced_AC( ~PAN, nc2, 'ARQC',
                       <~PAN, <'CDA', furtherData>, CVM, 
                        <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
     ),
     !LtkCard( ~PAN, ~privkCard ), !Shk( ~PAN, ~MK ),
     !IssuingBank( ~PAN, $Bank ), Fr( ~nc ),
     In( <'GENERATE_AC', 'TC', 'CDA', 'ARC', MAC_arpc(f(~MK, ATC), z)> )
     ]
    --[
    Running( ~PAN, 'Terminal',
             <'Card', 'Terminal', ~PAN, <'CDA', furtherData>, CVM, 
              <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
               MAC_arpc(f(~MK, ATC), z)>, 
              ATC, 
              MAC(f(~MK, ATC),
                  <
                   <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                    MAC_arpc(f(~MK, ATC), z)>, 
                   <'CDA', furtherData>, ATC, 'IAD', 'TC'>), 
              'IAD', 'TC'>
    ),
    Running( ~PAN, $Bank,
             <'Card', 'Bank', ~PAN, <'CDA', furtherData>, CVM, 
              <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
               MAC_arpc(f(~MK, ATC), z)>, 
              ATC, 
              MAC(f(~MK, ATC),
                  <
                   <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                    MAC_arpc(f(~MK, ATC), z)>, 
                   <'CDA', furtherData>, ATC, 'IAD', 'TC'>), 
              'IAD', 'TC'>
    )
    ]->
     [
     Out( <'TC', ATC, 
           MAC(f(~MK, ATC),
               <
                <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                 MAC_arpc(f(~MK, ATC), z)>, 
                <'CDA', furtherData>, ATC, 'IAD', 'TC'>), 
           <~nc, 
            sign(<'05', ~nc, 'TC', 
                  MAC(f(~MK, ATC),
                      <
                       <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                        MAC_arpc(f(~MK, ATC), z)>, 
                       <'CDA', furtherData>, ATC, 'IAD', 'TC'>), 
                  h(<
                     <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                      MAC_arpc(f(~MK, ATC), z)>, 
                     'TC', ATC, 
                     MAC(f(~MK, ATC),
                         <
                          <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                           MAC_arpc(f(~MK, ATC), z)>, 
                          <'CDA', furtherData>, ATC, 'IAD', 'TC'>), 
                     'IAD', 'TC'>), 
                  UN>,
                 ~privkCard)
           >, 
           'IAD', 'TC'>
     )
     ]
    variants (modulo AC)
    1. AC    = AC.26
       z     = (AC.26⊕p8('ARC'))
    
    2. AC    = p8('ARC')
       z     = zero
    
    3. AC    = zero
       z     = p8('ARC')
    
    4. AC    = (z.26⊕p8('ARC'))
       z     = z.26
  */

rule (modulo E) Terminal_Receives_SecondAC_NoCDA:
   [
   Terminal_Sent_Second_GenerateAC_NoCDA( $Terminal, $Bank, $CA, nc,
                                          <~PAN, AIP, CVM, 
                                           <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, 
                                           IAD>,
                                          ~channelID, CDOL2
   ),
   In( <'TC', ATC, TC, 'IAD', 'TC'> )
   ]
  --[
  Running( $Terminal, $Bank,
           <'Terminal', 'Bank', ~PAN, AIP, CVM, 
            <<$amount, country, currency, date, type, ~UN>, CDOL1, CDOL2>, ATC, TC, 
            'IAD', 'TC'>
  )
  ]->
   [
   Terminal_Received_SecondAC( $Terminal, $Bank, $CA, nc,
                               <~PAN, AIP, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1, CDOL2>, ATC, TC, 
                                'IAD', 'TC'>,
                               ~channelID
   ),
   Send( $Terminal, $Bank, <~channelID, '3'>,
         <~PAN, AIP, CVM, 
          <<$amount, country, currency, date, type, ~UN>, CDOL1, CDOL2>, ATC, TC, 
          'IAD', 'TC'>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_SecondAC_CDA:
   [
   Terminal_Sent_Second_GenerateAC_CDA( $Terminal, $Bank, $CA, nc2,
                                        <~PAN, AIP, CVM, 
                                         <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, IAD
                                        >,
                                        ~channelID, CDOL2, pubkCard
   ),
   In( <'TC', ATC, TC, <nc, SDAD>, 'IAD', 'TC'> )
   ]
  --[
  Eq( verify(SDAD,
             <'05', nc, 'TC', TC, 
              h(<<<$amount, country, currency, date, type, ~UN>, CDOL1, CDOL2>, 'TC', 
                 ATC, TC, 'IAD', 'TC'>), 
              ~UN>,
             pubkCard),
      true
  ),
  ActiveTransaction( $Terminal, ~UN ),
  Running( $Terminal, $Bank,
           <'Terminal', 'Bank', ~PAN, AIP, CVM, 
            <<$amount, country, currency, date, type, ~UN>, CDOL1, CDOL2>, ATC, TC, 
            'IAD', 'TC'>
  )
  ]->
   [
   Terminal_Received_SecondAC( $Terminal, $Bank, $CA, nc,
                               <~PAN, AIP, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1, CDOL2>, ATC, TC, 
                                'IAD', 'TC'>,
                               ~channelID
   ),
   Send( $Terminal, $Bank, <~channelID, '3'>,
         <~PAN, AIP, CVM, 
          <<$amount, country, currency, date, type, ~UN>, CDOL1, CDOL2>, ATC, TC, 
          'IAD', 'TC'>
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_SecondAC_CDA:
     [
     Terminal_Sent_Second_GenerateAC_CDA( $Terminal, $Bank, $CA, nc2,
                                          <~PAN, AIP, CVM, 
                                           <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, AC, 
                                           IAD>,
                                          ~channelID, CDOL2, pubkCard
     ),
     In( <'TC', ATC, TC, <nc, SDAD>, 'IAD', 'TC'> )
     ]
    --[
    Eq( z, true ), ActiveTransaction( $Terminal, ~UN ),
    Running( $Terminal, $Bank,
             <'Terminal', 'Bank', ~PAN, AIP, CVM, 
              <<$amount, country, currency, date, type, ~UN>, CDOL1, CDOL2>, ATC, TC, 
              'IAD', 'TC'>
    )
    ]->
     [
     Terminal_Received_SecondAC( $Terminal, $Bank, $CA, nc,
                                 <~PAN, AIP, CVM, 
                                  <<$amount, country, currency, date, type, ~UN>, CDOL1, CDOL2>, ATC, TC, 
                                  'IAD', 'TC'>,
                                 ~channelID
     ),
     Send( $Terminal, $Bank, <~channelID, '3'>,
           <~PAN, AIP, CVM, 
            <<$amount, country, currency, date, type, ~UN>, CDOL1, CDOL2>, ATC, TC, 
            'IAD', 'TC'>
     )
     ]
    variants (modulo AC)
    1. $amount
             = $amount.48
       ~UN   = ~UN.50
       ATC   = ATC.54
       CDOL1 = CDOL1.55
       CDOL2 = CDOL2.56
       SDAD  = SDAD.59
       TC    = TC.60
       country
             = country.61
       currency
             = currency.62
       date  = date.63
       nc    = nc.64
       pubkCard
             = pubkCard.66
       type  = type.67
       z     = verify(SDAD.59,
                      <'05', nc.64, 'TC', TC.60, 
                       h(<
                          <<$amount.48, country.61, currency.62, date.63, type.67, ~UN.50>, 
                           CDOL1.55, CDOL2.56>, 
                          'TC', ATC.54, TC.60, 'IAD', 'TC'>), 
                       ~UN.50>,
                      pubkCard.66)
    
    2. $amount
             = $amount.150
       ~UN   = ~UN.152
       ATC   = ATC.156
       CDOL1 = CDOL1.157
       CDOL2 = CDOL2.158
       SDAD  = sign(<'05', nc.166, 'TC', TC.162, 
                     h(<
                        <<$amount.150, country.163, currency.164, date.165, type.169, ~UN.152>, 
                         CDOL1.157, CDOL2.158>, 
                        'TC', ATC.156, TC.162, 'IAD', 'TC'>), 
                     ~UN.152>,
                    x.295)
       TC    = TC.162
       country
             = country.163
       currency
             = currency.164
       date  = date.165
       nc    = nc.166
       pubkCard
             = pk(x.295)
       type  = type.169
       z     = true
  */

rule (modulo E) Terminal_Commits_ARQC:
   [
   Terminal_Received_SecondAC( $Terminal, $Bank, $CA, nc,
                               <~PAN, <'CDA', furtherData>, 'PlainPIN', X, ATC, AC, IAD>, ~channelID
   )
   ]
  --[
  TerminalAccepts( <~PAN, <'CDA', furtherData>, 'PlainPIN', X, ATC, AC, IAD
                   >
  ),
  Commit( 'Terminal', ~PAN,
          <'Card', 'Terminal', ~PAN, <'CDA', furtherData>, 'PlainPIN', X, ATC, AC, 
           IAD>
  ),
  Honest( $CA ), Honest( $Bank ), Honest( $Terminal ), Honest( ~PAN )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Receives_Second_AC:
   [
   Bank_Checked_AC_and_CVM( $Bank, $Terminal,
                            <~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, AC, 'IAD', 'ARQC'>, channelID, ARPC
   ),
   Recv( $Terminal, $Bank, <channelID, '3'>,
         <~PAN, AIP, CVM, <PDOL, CDOL1, 'ARC', ARPC>, ATC, 
          MAC(f(~MK, ATC), <<PDOL, CDOL1, 'ARC', ARPC>, AIP, ATC, 'IAD', 'TC'>), 
          'IAD', 'TC'>
   ),
   !Shk( ~PAN, ~MK )
   ]
  -->
   [
   Bank_Checked_SecondAC( $Bank, $Terminal,
                          <~PAN, AIP, CVM, <PDOL, CDOL1, 'ARC', ARPC>, ATC, 
                           MAC(f(~MK, ATC), <<PDOL, CDOL1, 'ARC', ARPC>, AIP, ATC, 'IAD', 'TC'>), 
                           'IAD', 'TC'>
   ),
   Send( $Bank, $Terminal, <channelID, '4'>, 'ARC' )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Receives_Second_AC_Failed:
   [
   Recv( $Terminal, $Bank, <channelID, '3'>,
         <~PAN, AIP, CVM, X, ATC, AC, IAD>
   ),
   !Shk( ~PAN, ~MK )
   ]
  --[
  NEq( MAC(f(~MK, ATC), <X, AIP, ATC, IAD>), AC ),
  BankDeclines( <~PAN, AIP, CVM, X, ATC, AC, IAD> )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Commits_ARQC:
   [
   Bank_Checked_SecondAC( $Bank, $Terminal,
                          <~PAN, <'CDA', furtherData>, 'PlainPIN', X, ATC, AC, IAD>
   ),
   !IssuingCA( $Bank, $CA )
   ]
  --[
  Commit( $Bank, ~PAN,
          <'Card', 'Bank', ~PAN, <'CDA', furtherData>, 'PlainPIN', X, ATC, AC, IAD>
  ),
  Commit( $Bank, $Terminal,
          <'Terminal', 'Bank', ~PAN, <'CDA', furtherData>, 'PlainPIN', X, ATC, AC, 
           IAD>
  ),
  Honest( $CA ), Honest( $Bank ), Honest( $Terminal ), Honest( ~PAN )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction equal:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction not_equal:
  "∀ a #i. (NEq( a, a ) @ #i) ⇒ (⊥)"
  // safety formula

restriction once:
  "∀ a #i #j. ((Once( a ) @ #i) ∧ (Once( a ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction unique_role:
  "∀ A r1 r2 #i #j.
    ((Role( A, r1 ) @ #i) ∧ (Role( A, r2 ) @ #j)) ⇒ (r1 = r2)"
  // safety formula

restriction compatibility:
  "((∀ #i. (Compatible_CID_CVM( 'TC', 'OnlinePIN' ) @ #i) ⇒ (⊥)) ∧
    (∀ #i. (Compatible_CID_acType( 'TC', 'ARQC' ) @ #i) ⇒ (⊥))) ∧
   (∀ #i. (Compatible_Auth_CVM( 'SDA', 'EncPIN' ) @ #i) ⇒ (⊥))"
  // safety formula

restriction one_transaction_at_a_time:
  "∀ T UNi UNj #i #j.
    (((StartTransaction( T, UNi ) @ #i) ∧
      (StartTransaction( T, UNj ) @ #j)) ∧
     (#i < #j)) ⇒
    (¬(∃ #k. (ActiveTransaction( T, UNi ) @ #k) ∧ (#j < #k)))"
  // safety formula

lemma ARPC_source [sources]:
  all-traces
  "∀ ARPC #i.
    (IN_1( ARPC ) @ #i) ⇒ (∃ #j. (OUT_1( ARPC ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ ARPC #i.
  (IN_1( ARPC ) @ #i) ∧ ∀ #j. (OUT_1( ARPC ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( Recv( $Bank, $Terminal, <~channelID, '2'>, <'ARC', ARPC> ) ▶₁ #i )
    case Terminal_Bank_Network_case_1
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, AIP.1, CVM.1, X, ATC.1, AC.1, IAD.1>, 'Null', ~channelID, ARPC
           ) ▶₀ #vr.1 )
      case Bank_Receives_AC_case_01
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_02
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_03
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_04
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_05
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_06
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_07
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_08
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_09
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_10
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_11
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_12
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_13
      by contradiction /* from formulas */
    qed
  next
    case Terminal_Bank_Network_case_2
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, AIP.1, 'OnlinePIN', X, ATC.1, AC.1, IAD.1>,
                            aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
           ) ▶₀ #vr.1 )
      case Bank_Receives_AC_case_1
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_2
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma executable:
  exists-trace
  "∃ Bank PAN t #i #j #k #l.
    (((((((((#i < #j) ∧
            (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i)) ∧
           (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j)) ∧
          (#k < #l)) ∧
         (Running( PAN, Bank, <'Card', 'Bank', t> ) @ #k)) ∧
        (Commit( Bank, PAN, <'Card', 'Bank', t> ) @ #l)) ∧
       (∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b))) ∧
      (∀ #a #b. ((OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b)) ⇒ (#a = #b))) ∧
     (∀ A B r #a #b. ((Role( A, r ) @ #a) ∧ (Role( B, r ) @ #b)) ⇒ (A = B))) ∧
    (¬(∃ A #a. Compromise( A ) @ #a))"
/*
guarded formula characterizing all satisfying traces:
"∃ Bank PAN t #i #j #k #l.
  (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i) ∧
  (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j) ∧
  (Running( PAN, Bank, <'Card', 'Bank', t> ) @ #k) ∧
  (Commit( Bank, PAN, <'Card', 'Bank', t> ) @ #l)
 ∧
  (#i < #j) ∧
  (#k < #l) ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #a #b. (OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b) ⇒ #a = #b) ∧
  (∀ A B r #a #b. (Role( A, r ) @ #a) ∧ (Role( B, r ) @ #b) ⇒ A = B) ∧
  (∀ A #a. (Compromise( A ) @ #a) ⇒ ⊥)"
*/
simplify
solve( Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i )
  case Card_Responds_To_Second_GenerateAC_CDA
  solve( !Shk( ~PAN, ~MK ) ▶₂ #i )
    case Create_Card
    solve( !IssuingBank( ~PAN, $Bank ) ▶₃ #i )
      case Create_Card
      solve( Card_Produced_AC( ~PAN, nc2, 'ARQC',
                               <~PAN, <'CDA', furtherData>, CVM, 
                                <<amount, country, currency, date, type, UN>, CDOL1>, ATC, AC, IAD>
             ) ▶₀ #i )
        case Card_Responds_To_GenerateAC_CDA_case_3
        solve( !KU( ~PIN ) @ #vk.18 )
          case Terminal_Processes_CVM_PlainPIN_case_2
          solve( !KU( ~PAN ) @ #vk.40 )
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !LtkCard( ~PAN, ~privkCard ) ▶₁ #i )
              case Set_Records_NotSDA
              solve( Commit( 'Terminal', ~PAN,
                             <'Card', 'Terminal', ~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <<<amount, country, currency, date, type, UN>, CDOL1>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<amount, country, currency, date, type, UN>, CDOL1, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <<<amount, country, currency, date, type, UN>, CDOL1>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>
                     ) @ #j )
                case Terminal_Commits_ARQC
                solve( Terminal_Received_SecondAC( $Terminal, $Bank.1, $CA, nc.2,
                                                   <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                                    <<amount, country, currency, date, type, UN>, CDOL1, 
                                                     'ARC', 
                                                     MAC_arpc(f(~MK, ~ATC),
                                                              (
                                                               MAC(f(~MK, ~ATC),
                                                                   <
                                                                    <
                                                                     <amount, country, currency, date, type, 
                                                                      UN>, 
                                                                     CDOL1>, 
                                                                    <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                                   >)⊕
                                                               p8('ARC')))
                                                    >, 
                                                    ~ATC, 
                                                    MAC(f(~MK, ~ATC),
                                                        <
                                                         <<amount, country, currency, date, type, UN>, CDOL1, 
                                                          'ARC', 
                                                          MAC_arpc(f(~MK, ~ATC),
                                                                   (
                                                                    MAC(f(~MK, ~ATC),
                                                                        <
                                                                         <
                                                                          <amount, country, currency, date, 
                                                                           type, UN>, 
                                                                          CDOL1>, 
                                                                         <'CDA', $furtherData>, ~ATC, 'IAD', 
                                                                         'ARQC'>)⊕
                                                                    p8('ARC')))
                                                         >, 
                                                         <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                    'IAD', 'TC'>,
                                                   ~channelID
                       ) ▶₀ #j )
                  case Terminal_Receives_SecondAC_CDA
                  solve( !KU( ~ATC ) @ #vk.70 )
                    case Card_Responds_To_GenerateAC_CDA
                    solve( !KU( ~UN ) @ #vk.56 )
                      case Terminal_Sends_GPO
                      solve( Running( ~PAN, Bank.1,
                                      <'Card', 'Bank', ~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                        MAC_arpc(f(~MK, ~ATC),
                                                 (
                                                  MAC(f(~MK, ~ATC),
                                                      <
                                                       <
                                                        <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                         ~UN>, 
                                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                       <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                  p8('ARC')))
                                       >, 
                                       ~ATC, 
                                       MAC(f(~MK, ~ATC),
                                           <
                                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                             <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                             MAC_arpc(f(~MK, ~ATC),
                                                      (
                                                       MAC(f(~MK, ~ATC),
                                                           <
                                                            <
                                                             <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                              'Purchase', ~UN>, 
                                                             'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                            <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                       p8('ARC')))
                                            >, 
                                            <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                       'IAD', 'TC'>
                             ) @ #k )
                        case Card_Responds_To_Second_GenerateAC_CDA
                        solve( !Shk( ~PAN, ~MK ) ▶₂ #k )
                          case Create_Card
                          solve( !IssuingBank( ~PAN, $Bank.1 ) ▶₃ #k )
                            case Create_Card
                            solve( Card_Produced_AC( ~PAN, nc2, 'ARQC',
                                                     <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                                      IAD>
                                   ) ▶₀ #k )
                              case Card_Responds_To_GenerateAC_CDA
                              solve( Commit( $Bank, ~PAN,
                                             <'Card', 'Bank', ~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                               MAC_arpc(f(~MK, ~ATC),
                                                        (
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                         p8('ARC')))
                                              >, 
                                              ~ATC, 
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                                    MAC_arpc(f(~MK, ~ATC),
                                                             (
                                                              MAC(f(~MK, ~ATC),
                                                                  <
                                                                   <
                                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                     'Purchase', ~UN>, 
                                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                                  >)⊕
                                                              p8('ARC')))
                                                   >, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                              'IAD', 'TC'>
                                     ) @ #l )
                                case Bank_Commits_ARQC
                                solve( Bank_Checked_SecondAC( $Bank, $Terminal.1,
                                                              <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                                               <
                                                                <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                 'Purchase', ~UN>, 
                                                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                                                MAC_arpc(f(~MK, ~ATC),
                                                                         (
                                                                          MAC(f(~MK, ~ATC),
                                                                              <
                                                                               <
                                                                                <$amount, 'Switzerland', 
                                                                                 'CHF', 'YYMMDD', 'Purchase', 
                                                                                 ~UN>, 
                                                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                               <'CDA', $furtherData>, ~ATC, 
                                                                               'IAD', 'ARQC'>)⊕
                                                                          p8('ARC')))
                                                               >, 
                                                               ~ATC, 
                                                               MAC(f(~MK, ~ATC),
                                                                   <
                                                                    <
                                                                     <$amount, 'Switzerland', 'CHF', 
                                                                      'YYMMDD', 'Purchase', ~UN>, 
                                                                     <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                                                     MAC_arpc(f(~MK, ~ATC),
                                                                              (
                                                                               MAC(f(~MK, ~ATC),
                                                                                   <
                                                                                    <
                                                                                     <$amount, 'Switzerland', 
                                                                                      'CHF', 'YYMMDD', 
                                                                                      'Purchase', ~UN>, 
                                                                                     'TVR', 'PlainPIN', 
                                                                                     'HHMMSS'>, 
                                                                                    <'CDA', $furtherData>, 
                                                                                    ~ATC, 'IAD', 'ARQC'>)⊕
                                                                               p8('ARC')))
                                                                    >, 
                                                                    <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'
                                                                   >), 
                                                               'IAD', 'TC'>
                                       ) ▶₀ #l )
                                  case Bank_Receives_Second_AC
                                  solve( !IssuingCA( $Bank, $CA.1 ) ▶₁ #l )
                                    case Create_Bank
                                    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.70 )
                                      case Card_Responds_To_ReadRecord_NotDDA
                                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                                                        $furtherData>,
                                                       ~privkBank)
                                             ) @ #vk.74 )
                                        case Card_Responds_To_ReadRecord_NotDDA
                                        solve( !KU( sign(<'05', nc.2, 'TC', 
                                                          MAC(f(~MK, ~ATC),
                                                              <
                                                               <
                                                                <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                 'Purchase', ~UN>, 
                                                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                                                MAC_arpc(f(~MK, ~ATC),
                                                                         (
                                                                          MAC(f(~MK, ~ATC),
                                                                              <
                                                                               <
                                                                                <$amount, 'Switzerland', 
                                                                                 'CHF', 'YYMMDD', 'Purchase', 
                                                                                 ~UN>, 
                                                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                               <'CDA', $furtherData>, ~ATC, 
                                                                               'IAD', 'ARQC'>)⊕
                                                                          p8('ARC')))
                                                               >, 
                                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                          h(<
                                                             <
                                                              <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                               'Purchase', ~UN>, 
                                                              <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                                              MAC_arpc(f(~MK, ~ATC),
                                                                       (
                                                                        MAC(f(~MK, ~ATC),
                                                                            <
                                                                             <
                                                                              <$amount, 'Switzerland', 'CHF', 
                                                                               'YYMMDD', 'Purchase', ~UN>, 
                                                                              'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                             <'CDA', $furtherData>, ~ATC, 
                                                                             'IAD', 'ARQC'>)⊕
                                                                        p8('ARC')))
                                                             >, 
                                                             'TC', ~ATC, 
                                                             MAC(f(~MK, ~ATC),
                                                                 <
                                                                  <
                                                                   <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                    'Purchase', ~UN>, 
                                                                   <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                                                   MAC_arpc(f(~MK, ~ATC),
                                                                            (
                                                                             MAC(f(~MK, ~ATC),
                                                                                 <
                                                                                  <
                                                                                   <$amount, 'Switzerland', 
                                                                                    'CHF', 'YYMMDD', 
                                                                                    'Purchase', ~UN>, 
                                                                                   'TVR', 'PlainPIN', 'HHMMSS'
                                                                                  >, 
                                                                                  <'CDA', $furtherData>, 
                                                                                  ~ATC, 'IAD', 'ARQC'>)⊕
                                                                             p8('ARC')))
                                                                  >, 
                                                                  <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                             'IAD', 'TC'>), 
                                                          ~UN>,
                                                         ~privkCard)
                                               ) @ #vk.78 )
                                          case Card_Responds_To_Second_GenerateAC_CDA
                                          solve( !KU( ~nc.1 ) @ #vk.78 )
                                            case Card_Responds_To_Second_GenerateAC_CDA
                                            solve( !KU( sign(<'05', nc2, 'ARQC', 
                                                              MAC(f(~MK, ~ATC),
                                                                  <
                                                                   <
                                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                     'Purchase', ~UN>, 
                                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                                  >), 
                                                              h(<
                                                                 <
                                                                  <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                   'Purchase', ~UN>, 
                                                                  'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                 'ARQC', ~ATC, 
                                                                 MAC(f(~MK, ~ATC),
                                                                     <
                                                                      <
                                                                       <$amount, 'Switzerland', 'CHF', 
                                                                        'YYMMDD', 'Purchase', ~UN>, 
                                                                       'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                      <'CDA', $furtherData>, ~ATC, 'IAD', 
                                                                      'ARQC'>), 
                                                                 'IAD', 'ARQC'>), 
                                                              ~UN>,
                                                             ~privkCard)
                                                   ) @ #vk.83 )
                                              case Card_Responds_To_GenerateAC_CDA
                                              solve( !KU( ~nc ) @ #vk.83 )
                                                case Card_Responds_To_GenerateAC_CDA
                                                solve( Recv( $Bank, $Terminal, <~channelID, '2'>,
                                                             <'ARC', 
                                                              MAC_arpc(f(~MK, ~ATC),
                                                                       (
                                                                        MAC(f(~MK, ~ATC),
                                                                            <
                                                                             <
                                                                              <$amount, 'Switzerland', 'CHF', 
                                                                               'YYMMDD', 'Purchase', ~UN>, 
                                                                              'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                             <'CDA', $furtherData>, ~ATC, 
                                                                             'IAD', 'ARQC'>)⊕
                                                                        p8('ARC')))
                                                             >
                                                       ) ▶₁ #vr.18 )
                                                  case Terminal_Bank_Network_case_1
                                                  solve( Recv( $Terminal.1, $Bank, <channelID.1, '3'>,
                                                               <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                                                <
                                                                 <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                  'Purchase', ~UN>, 
                                                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                                                 MAC_arpc(f(~MK, ~ATC),
                                                                          (
                                                                           MAC(f(~MK, ~ATC),
                                                                               <
                                                                                <
                                                                                 <$amount, 'Switzerland', 
                                                                                  'CHF', 'YYMMDD', 
                                                                                  'Purchase', ~UN>, 
                                                                                 'TVR', 'PlainPIN', 'HHMMSS'
                                                                                >, 
                                                                                <'CDA', $furtherData>, ~ATC, 
                                                                                'IAD', 'ARQC'>)⊕
                                                                           p8('ARC')))
                                                                >, 
                                                                ~ATC, 
                                                                MAC(f(~MK, ~ATC),
                                                                    <
                                                                     <
                                                                      <$amount, 'Switzerland', 'CHF', 
                                                                       'YYMMDD', 'Purchase', ~UN>, 
                                                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                                                      MAC_arpc(f(~MK, ~ATC),
                                                                               (
                                                                                MAC(f(~MK, ~ATC),
                                                                                    <
                                                                                     <
                                                                                      <$amount, 
                                                                                       'Switzerland', 'CHF', 
                                                                                       'YYMMDD', 'Purchase', 
                                                                                       ~UN>, 
                                                                                      'TVR', 'PlainPIN', 
                                                                                      'HHMMSS'>, 
                                                                                     <'CDA', $furtherData>, 
                                                                                     ~ATC, 'IAD', 'ARQC'>)⊕
                                                                                p8('ARC')))
                                                                     >, 
                                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'
                                                                    >), 
                                                                'IAD', 'TC'>
                                                         ) ▶₁ #vr.31 )
                                                    case Terminal_Bank_Network
                                                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                                                            <~PAN, <'CDA', $furtherData>, 
                                                                             'PlainPIN', 
                                                                             <
                                                                              <$amount, 'Switzerland', 'CHF', 
                                                                               'YYMMDD', 'Purchase', ~UN>, 
                                                                              'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                             ~ATC, AC, 'IAD', 'ARQC'>,
                                                                            'Null', ~channelID,
                                                                            MAC_arpc(f(~MK, ~ATC),
                                                                                     (
                                                                                      MAC(f(~MK, ~ATC),
                                                                                          <
                                                                                           <
                                                                                            <$amount, 
                                                                                             'Switzerland', 
                                                                                             'CHF', 'YYMMDD', 
                                                                                             'Purchase', ~UN
                                                                                            >, 
                                                                                            'TVR', 
                                                                                            'PlainPIN', 
                                                                                            'HHMMSS'>, 
                                                                                           <'CDA', 
                                                                                            $furtherData>, 
                                                                                           ~ATC, 'IAD', 'ARQC'
                                                                                          >)⊕
                                                                                      p8('ARC')))
                                                           ) ▶₀ #vr.32 )
                                                      case Bank_Receives_AC
                                                      solve( Bank_Checked_AC( $Bank, $Terminal,
                                                                              <~PAN.1, AIP, CVM, X, ATC.1, 
                                                                               AC, IAD>,
                                                                              'Null', ~channelID,
                                                                              MAC_arpc(f(~MK, ~ATC),
                                                                                       (
                                                                                        MAC(f(~MK, ~ATC),
                                                                                            <
                                                                                             <
                                                                                              <$amount, 
                                                                                               'Switzerland', 
                                                                                               'CHF', 
                                                                                               'YYMMDD', 
                                                                                               'Purchase', ~UN
                                                                                              >, 
                                                                                              'TVR', 
                                                                                              'PlainPIN', 
                                                                                              'HHMMSS'>, 
                                                                                             <'CDA', 
                                                                                              $furtherData>, 
                                                                                             ~ATC, 'IAD', 
                                                                                             'ARQC'>)⊕
                                                                                        p8('ARC')))
                                                             ) ▶₀ #vr.53 )
                                                        case Bank_Receives_AC
                                                        solve( !KU( MAC_arpc(f(~MK, ~ATC),
                                                                             (
                                                                              MAC(f(~MK, ~ATC),
                                                                                  <
                                                                                   <
                                                                                    <$amount, 'Switzerland', 
                                                                                     'CHF', 'YYMMDD', 
                                                                                     'Purchase', ~UN>, 
                                                                                    'TVR', 'PlainPIN', 
                                                                                    'HHMMSS'>, 
                                                                                   <'CDA', $furtherData>, 
                                                                                   ~ATC, 'IAD', 'ARQC'>)⊕
                                                                              p8('ARC')))
                                                               ) @ #vk.54 )
                                                          case Terminal_Sends_Second_GenerateAC_CDA
                                                          solve( !KU( pk(~privkBank) ) @ #vk.77 )
                                                            case Card_Responds_To_ReadRecord_NotDDA
                                                            solve( !KU( MAC(f(~MK, ~ATC),
                                                                            <
                                                                             <
                                                                              <$amount, 'Switzerland', 'CHF', 
                                                                               'YYMMDD', 'Purchase', ~UN>, 
                                                                              <'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                              'ARC', 
                                                                              MAC_arpc(f(~MK, ~ATC),
                                                                                       (
                                                                                        MAC(f(~MK, ~ATC),
                                                                                            <
                                                                                             <
                                                                                              <$amount, 
                                                                                               'Switzerland', 
                                                                                               'CHF', 
                                                                                               'YYMMDD', 
                                                                                               'Purchase', ~UN
                                                                                              >, 
                                                                                              'TVR', 
                                                                                              'PlainPIN', 
                                                                                              'HHMMSS'>, 
                                                                                             <'CDA', 
                                                                                              $furtherData>, 
                                                                                             ~ATC, 'IAD', 
                                                                                             'ARQC'>)⊕
                                                                                        p8('ARC')))
                                                                             >, 
                                                                             <'CDA', $furtherData>, ~ATC, 
                                                                             'IAD', 'TC'>)
                                                                   ) @ #vk.81 )
                                                              case Card_Responds_To_Second_GenerateAC_CDA
                                                              solve( !KU( pk(~privkCard) ) @ #vk.80 )
                                                                case Card_Responds_To_ReadRecord_NotDDA
                                                                solve( !KU( MAC(f(~MK, ~ATC),
                                                                                <
                                                                                 <
                                                                                  <$amount, 'Switzerland', 
                                                                                   'CHF', 'YYMMDD', 
                                                                                   'Purchase', ~UN>, 
                                                                                  'TVR', 'PlainPIN', 'HHMMSS'
                                                                                 >, 
                                                                                 <'CDA', $furtherData>, ~ATC, 
                                                                                 'IAD', 'ARQC'>)
                                                                       ) @ #vk.83 )
                                                                  case Card_Responds_To_GenerateAC_CDA
                                                                  SOLVED // trace found
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma bank_accepts:
  all-traces
  "∀ t #i.
    (TerminalAccepts( t ) @ #i) ⇒
    ((¬(∃ #j. BankDeclines( t ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ t #i.
  (TerminalAccepts( t ) @ #i)
 ∧
  (∃ #j. (BankDeclines( t ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Terminal_Received_SecondAC( $Terminal, $Bank, $CA, nc,
                                   <~PAN, <'CDA', furtherData>, 'PlainPIN', X, ATC, AC, IAD>, ~channelID
       ) ▶₀ #i )
  case Terminal_Receives_SecondAC_CDA_case_01
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'NoPIN', 'HHMMSS'>, 
                                       <'SDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.124 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.124 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.126 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.129 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.128 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.131 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.117 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.112 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.125 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.97 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.98 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.105 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_02
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'NoPIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.121 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.119 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_03
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'SDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.124 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.126 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.129 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.128 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.131 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.117 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.112 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.125 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.97 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.98 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.105 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_04
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'SDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.124 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.126 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.129 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.128 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.131 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.117 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.112 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.125 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.97 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.98 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.105 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_05
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.121 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.119 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_06
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.121 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.119 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_07
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'SDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.125 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.128 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.127 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.130 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.115 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.115 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.111 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.112 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.96 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.112 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.96 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.111 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.96 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.104 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_08
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'SDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.125 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.128 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.127 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.130 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.115 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.115 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.111 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.112 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.96 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.112 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.96 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.111 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.96 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.104 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_09
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.120 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.118 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.125 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.121 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.107 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.125 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.121 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.121 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.114 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_10
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.120 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.118 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.125 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.121 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.107 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.125 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.121 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.121 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.114 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_11
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'EncPIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.122 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.120 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.109 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.116 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_12
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'EncPIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.122 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.120 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.109 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.116 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_13
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'NoPIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.122 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.120 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.107 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_14
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.122 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.120 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.107 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_15
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.122 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.120 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.107 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_16
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.121 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.119 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.92 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.92 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.94 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.96 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_5
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.48 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.86 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.91 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_6
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.48 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.86 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.91 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_7
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.48 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.93 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.93 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.93 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.88 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.93 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_8
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.48 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.95 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.95 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.95 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.90 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.95 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.106 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.114 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_17
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.121 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.119 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.106 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.114 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_18
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'EncPIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.128 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.128 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.123 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.121 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.116 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_19
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'EncPIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.128 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.128 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.123 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.121 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.116 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_20
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'NoPIN', 'HHMMSS'>, 
                                       <'SDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.124 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.124 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.126 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.129 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.128 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.131 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.117 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.112 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.125 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.97 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.98 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.105 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_21
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'NoPIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.121 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.119 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_22
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'SDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.124 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.126 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.129 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.128 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.131 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.117 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.112 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.125 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.97 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.98 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.105 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_23
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'SDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.124 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.126 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.129 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.128 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.131 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.68 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.117 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.112 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.125 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.99 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.127 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.97 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.71 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.118 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.113 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.98 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.113 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.105 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_24
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.121 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.119 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_25
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.121 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.119 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_26
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'SDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.125 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.128 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.127 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.130 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.115 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.115 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.111 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.112 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.96 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.112 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.96 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.111 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.96 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.104 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_27
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'SDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.123 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.125 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.132 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.133 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.128 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.127 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.134 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.76 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.135 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.130 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.115 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.115 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.70 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.116 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.111 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.112 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.98 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.130 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.75 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.131 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.126 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.96 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.116 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.72 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.117 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.112 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.96 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.97 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.111 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.72 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.96 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.112 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.104 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_28
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.120 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.118 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.125 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.121 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.107 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.125 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.121 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.121 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.114 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_29
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.82 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.76 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.120 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.118 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.125 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.121 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.136 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.107 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.125 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.121 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.121 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.114 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_30
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'EncPIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.122 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.120 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.109 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.116 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_31
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'EncPIN', 'HHMMSS'>, 
                                       <'DDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.78 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.71 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.122 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.120 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.60 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.77 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.74 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.109 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.73 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.116 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_32
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'NoPIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.122 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.120 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.107 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_33
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.122 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.120 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.107 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_34
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.134 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.136 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.144 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.139 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.122 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.120 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x.1)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.138 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.133 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.140 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.135 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.109 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.107 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.123 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.2), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x.1), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.107 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.123 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.115 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_35
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.121 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.119 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.106 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.114 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_36
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.133 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.125 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.79 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.126 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.121 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.119 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.92 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.92 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.94 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.96 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_5
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.48 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.86 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.91 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_6
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.48 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.91 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.86 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.91 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_7
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.48 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.93 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.93 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( BankDeclines( <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                 <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                 MAC_arpc(f(~MK, ~ATC),
                                          (
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                           p8('ARC')))
                                >, 
                                ~ATC, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                 ) @ #j.1 )
            case Bank_Receives_AC_Failed
            by solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '1'>,
                            <
                             <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                               <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                               MAC_arpc(f(~MK, ~ATC),
                                        (
                                         MAC(f(~MK, ~ATC),
                                             <
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'PlainPIN', 'HHMMSS'>, 
                                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                         p8('ARC')))
                              >, 
                              ~ATC, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                    MAC_arpc(f(~MK, ~ATC),
                                             (
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                              p8('ARC')))
                                   >, 
                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>, 
                             encPIN>
                      ) ▶₀ #j.1 )
          next
            case Bank_Receives_Second_AC_Failed
            solve( Recv( $Terminal.1, $Bank.1, <channelID.1, '3'>,
                         <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                           MAC_arpc(f(~MK, ~ATC),
                                    (
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'PlainPIN', 'HHMMSS'>, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                     p8('ARC')))
                          >, 
                          ~ATC, 
                          MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >, 
                               <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                          'IAD', 'TC'>
                   ) ▶₀ #j.1 )
              case Terminal_Bank_Network
              solve( !Shk( ~PAN, ~MK.1 ) ▶₁ #j.1 )
                case Create_Card
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.93 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.88 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.93 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case Card_Responds_To_Second_GenerateAC_CDA_case_8
    solve( !KU( sign(<'05', nc2, 'ARQC', 
                      MAC(f(~MK, ~ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC, 
                         MAC(f(~MK, ~ATC),
                             <
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'PlainPIN', 'HHMMSS'>, 
                              <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                         'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.23 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.48 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.95 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.95 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          $furtherData>,
                         ~privkBank)
               ) @ #vk.62 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.95 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.90 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.95 )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.137 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.132 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.106 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.126 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.127 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.122 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.81 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.106 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.122 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.114 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_37
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'EncPIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.128 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.128 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.123 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.121 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.116 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Terminal_Receives_SecondAC_CDA_case_38
  solve( !KU( sign(<'05', nc, 'TC', AC, 
                    h(<
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                        MAC_arpc(f(~MK, ATC),
                                 (
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'EncPIN', 'HHMMSS'>, 
                                       <'CDA', furtherData.1>, ATC, 'IAD', CID>)⊕
                                  p8('ARC')))
                       >, 
                       'TC', ATC.1, AC, 'IAD', 'TC'>), 
                    ~UN>,
                   x)
         ) @ #vk.12 )
    case Card_Responds_To_GenerateAC_CDA_case_1
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_2
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.135 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.143 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.138 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_3
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.137 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.145 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.140 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_GenerateAC_CDA_case_4
    solve( !KU( sign(<'05', nc2, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ~ATC.1, AC, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.25 )
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.138 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.85 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.146 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.141 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Card_Responds_To_InternalAuthenticate
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     ~privkCard)
           ) @ #vk.26 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.57 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.127 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.128 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.78 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.128 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.123 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCard ) @ #vk.121 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case c_sign
    solve( !KU( sign(<'05', nc2, 'ARQC', AC.1, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'PlainPIN', 'HHMMSS'>, 
                         'ARQC', ATC.1, AC.1, 'IAD', 'ARQC'>), 
                      ~UN>,
                     x)
           ) @ #vk.27 )
      case Card_Responds_To_GenerateAC_CDA_case_1
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_2
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.139 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.134 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_3
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.141 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.136 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_GenerateAC_CDA_case_4
      solve( !KU( ~privkCard ) @ #vk.110 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.61 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.84 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.142 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.137 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( ~privkCard ) @ #vk.108 )
        case Compromise_Card
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.62 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.128 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.81 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.129 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.124 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.59 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'PlainPIN', 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.80 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.108 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.124 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.116 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma auth_to_terminal_minimal:
  all-traces
  "∀ T P r t #i.
    ((((∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b)) ∧
       (∀ #a #b. ((OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b)) ⇒ (#a = #b))) ∧
      (∀ #a #b. ((OneBank( ) @ #a) ∧ (OneBank( ) @ #b)) ⇒ (#a = #b))) ∧
     (Commit( T, P, <r, 'Terminal', t> ) @ #i)) ⇒
    ((∃ #j. Running( P, T, <r, 'Terminal', t> ) @ #j) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ T P r t #i.
  (Commit( T, P, <r, 'Terminal', t> ) @ #i)
 ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #a #b. (OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b) ⇒ #a = #b) ∧
  (∀ #a #b. (OneBank( ) @ #a) ∧ (OneBank( ) @ #b) ⇒ #a = #b) ∧
  (∀ #j. (Running( P, T, <r, 'Terminal', t> ) @ #j) ⇒ ⊥) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Commit( T, P, <r, 'Terminal', t> ) @ #i )
  case Terminal_Commits_ARQC
  solve( Terminal_Received_SecondAC( $Terminal, $Bank, $CA, nc,
                                     <~PAN, <'CDA', furtherData>, 'PlainPIN', X, ATC, AC, IAD>, ~channelID
         ) ▶₀ #i )
    case Terminal_Receives_SecondAC_CDA_case_1
    solve( !KU( sign(<'05', nc, 'TC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                          <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                          MAC_arpc(f(~MK, ATC),
                                   (
                                    MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'PlainPIN', 'HHMMSS'>, 
                                         <'CDA', furtherData>, ATC, 'IAD', 'ARQC'>)⊕
                                    p8('ARC')))
                         >, 
                         'TC', ATC, AC, 'IAD', 'TC'>), 
                      ~UN>,
                     x)
           ) @ #vk.12 )
      case Card_Responds_To_Second_GenerateAC_CDA_case_5
      solve( !KU( sign(<'05', nc2, 'ARQC', 
                        MAC(f(~MK, ~ATC),
                            <
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'PlainPIN', 'HHMMSS'>, 
                             <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                        h(<
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           'ARQC', ~ATC, 
                           MAC(f(~MK, ~ATC),
                               <
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'PlainPIN', 'HHMMSS'>, 
                                <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                           'IAD', 'ARQC'>), 
                        ~UN>,
                       ~privkCard)
             ) @ #vk.23 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.48 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            $furtherData>,
                           ~privkBank)
                 ) @ #vk.62 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( Recv( $Bank, $Terminal, <~channelID, '2'>,
                         <'ARC', 
                          MAC_arpc(f(~MK, ~ATC),
                                   (
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'PlainPIN', 'HHMMSS'>, 
                                         <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                    p8('ARC')))
                         >
                   ) ▶₁ #vr.2 )
              case Terminal_Bank_Network_case_1
              solve( Bank_Checked_AC( $Bank, $Terminal,
                                      <~PAN.1, AIP, CVM, X, ATC.1, AC, IAD>, 'Null', ~channelID,
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                     ) ▶₀ #vr.41 )
                case Bank_Receives_AC
                solve( !KU( ~PAN ) @ #vk.36 )
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( ~UN ) @ #vk.82 )
                    case Terminal_Sends_GPO
                    solve( !KU( ~ATC ) @ #vk.28 )
                      case Card_Responds_To_GenerateAC_CDA
                      solve( !KU( ~nc ) @ #vk.33 )
                        case Card_Responds_To_Second_GenerateAC_CDA
                        solve( !KU( ~nc.1 ) @ #vk.41 )
                          case Card_Responds_To_GenerateAC_CDA
                          solve( !KU( pk(~privkBank) ) @ #vk.56 )
                            case Card_Responds_To_ReadRecord_NotDDA
                            solve( !KU( pk(~privkCard) ) @ #vk.58 )
                              case Card_Responds_To_ReadRecord_NotDDA
                              solve( !KU( MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)
                                     ) @ #vk.47 )
                                case Card_Responds_To_GenerateAC_CDA
                                solve( !KU( MAC_arpc(f(~MK, ~ATC),
                                                     (
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                      p8('ARC')))
                                       ) @ #vk.75 )
                                  case Terminal_Sends_Second_GenerateAC_CDA
                                  solve( !KU( MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                                    MAC_arpc(f(~MK, ~ATC),
                                                             (
                                                              MAC(f(~MK, ~ATC),
                                                                  <
                                                                   <
                                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                     'Purchase', ~UN>, 
                                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                                  >)⊕
                                                              p8('ARC')))
                                                   >, 
                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>)
                                         ) @ #vk.46 )
                                    case Card_Responds_To_Second_GenerateAC_CDA
                                    SOLVED // trace found
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma auth_to_bank_minimal:
  all-traces
  "∀ B P r t #i.
    ((((∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b)) ∧
       (∀ #a #b. ((OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b)) ⇒ (#a = #b))) ∧
      (∀ #a #b. ((OneBank( ) @ #a) ∧ (OneBank( ) @ #b)) ⇒ (#a = #b))) ∧
     (Commit( B, P, <r, 'Bank', t> ) @ #i)) ⇒
    ((∃ #j. Running( P, B, <r, 'Bank', t> ) @ #j) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ B P r t #i.
  (Commit( B, P, <r, 'Bank', t> ) @ #i)
 ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #a #b. (OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b) ⇒ #a = #b) ∧
  (∀ #a #b. (OneBank( ) @ #a) ∧ (OneBank( ) @ #b) ⇒ #a = #b) ∧
  (∀ #j. (Running( P, B, <r, 'Bank', t> ) @ #j) ⇒ ⊥) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Commit( B, P, <r, 'Bank', t> ) @ #i )
  case Bank_Commits_ARQC_case_1
  solve( Bank_Checked_SecondAC( $Bank, $Terminal,
                                <~PAN, <'CDA', furtherData>, 'PlainPIN', X, ATC, AC, IAD>
         ) ▶₀ #i )
    case Bank_Receives_Second_AC
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN, <'CDA', furtherData>, 'PlainPIN', <PDOL, CDOL1>, ATC, AC, 'IAD', 
                             'ARQC'>,
                            'Null', channelID, ARPC
           ) ▶₀ #vr.1 )
      case Bank_Receives_AC_case_1
      solve( !KU( sign(<'05', nc, 'ARQC', 
                        MAC(f(~MK, ATC),
                            <
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'PlainPIN', 'HHMMSS'>, 
                             <'CDA', furtherData>, ATC, 'IAD', 'ARQC'>), 
                        h(<
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'PlainPIN', 'HHMMSS'>, 
                           'ARQC', ATC, 
                           MAC(f(~MK, ATC),
                               <
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'PlainPIN', 'HHMMSS'>, 
                                <'CDA', furtherData>, ATC, 'IAD', 'ARQC'>), 
                           'IAD', 'ARQC'>), 
                        ~UN>,
                       x.1)
             ) @ #vk.13 )
        case Card_Responds_To_GenerateAC_CDA_case_1
        solve( !KU( sign(<'02', $Bank, pk(x), $CA.1>, ~privkCA) ) @ #vk.39 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'PlainPIN', 'CDA', 
                            $furtherData>,
                           ~privkBank)
                 ) @ #vk.50 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !IssuingCA( $Bank, $CA ) ▶₁ #i )
              case Create_Bank
              solve( Recv( $Terminal, $Bank, <~channelID, '3'>,
                           <~PAN, <'CDA', $furtherData>, 'PlainPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                             <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                             MAC_arpc(f(~MK, ~ATC),
                                      (
                                       MAC(f(~MK, ~ATC),
                                           <
                                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                             'TVR', 'PlainPIN', 'HHMMSS'>, 
                                            <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                       p8('ARC')))
                            >, 
                            ~ATC, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                  <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                  MAC_arpc(f(~MK, ~ATC),
                                           (
                                            MAC(f(~MK, ~ATC),
                                                <
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                 <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                            p8('ARC')))
                                 >, 
                                 <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                            'IAD', 'TC'>
                     ) ▶₁ #vr )
                case Terminal_Bank_Network
                solve( !KU( sign(<'05', nc.1, 'TC', 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                        MAC_arpc(f(~MK, ~ATC),
                                                 (
                                                  MAC(f(~MK, ~ATC),
                                                      <
                                                       <
                                                        <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                         ~UN>, 
                                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                       <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                  p8('ARC')))
                                       >, 
                                       <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                  h(<
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                      <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                      MAC_arpc(f(~MK, ~ATC),
                                               (
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                     <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                p8('ARC')))
                                     >, 
                                     'TC', ~ATC, 
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                           <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                           MAC_arpc(f(~MK, ~ATC),
                                                    (
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                     p8('ARC')))
                                          >, 
                                          <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                     'IAD', 'TC'>), 
                                  ~UN>,
                                 ~privkCard)
                       ) @ #vk.78 )
                  case Card_Responds_To_Second_GenerateAC_CDA
                  solve( Recv( $Bank, $Terminal, <~channelID, '2'>,
                               <'ARC', 
                                MAC_arpc(f(~MK, ~ATC),
                                         (
                                          MAC(f(~MK, ~ATC),
                                              <
                                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                'TVR', 'PlainPIN', 'HHMMSS'>, 
                                               <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                          p8('ARC')))
                               >
                         ) ▶₁ #vr.37 )
                    case Terminal_Bank_Network_case_1
                    solve( Bank_Checked_AC( $Bank, $Terminal,
                                            <~PAN.1, AIP, CVM, X, ATC.1, AC, IAD>, 'Null', ~channelID,
                                            MAC_arpc(f(~MK, ~ATC),
                                                     (
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                           <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)⊕
                                                      p8('ARC')))
                           ) ▶₀ #vr.45 )
                      case Bank_Receives_AC
                      solve( !KU( ~PAN ) @ #vk.48 )
                        case Card_Responds_To_ReadRecord_NotDDA_case_1
                        solve( !KU( ~UN ) @ #vk.76 )
                          case Terminal_Sends_GPO
                          solve( !KU( ~ATC ) @ #vk.43 )
                            case Card_Responds_To_GenerateAC_CDA
                            solve( !KU( ~nc ) @ #vk.47 )
                              case Card_Responds_To_GenerateAC_CDA
                              solve( !KU( ~nc.1 ) @ #vk.81 )
                                case Card_Responds_To_Second_GenerateAC_CDA
                                solve( !KU( MAC(f(~MK, ~ATC),
                                                <
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                 <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'>)
                                       ) @ #vk.52 )
                                  case Card_Responds_To_GenerateAC_CDA
                                  solve( !KU( pk(~privkBank) ) @ #vk.64 )
                                    case Card_Responds_To_ReadRecord_NotDDA
                                    solve( !KU( pk(~privkCard) ) @ #vk.66 )
                                      case Card_Responds_To_ReadRecord_NotDDA
                                      solve( !KU( MAC(f(~MK, ~ATC),
                                                      <
                                                       <
                                                        <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                         ~UN>, 
                                                        <'TVR', 'PlainPIN', 'HHMMSS'>, 'ARC', 
                                                        MAC_arpc(f(~MK, ~ATC),
                                                                 (
                                                                  MAC(f(~MK, ~ATC),
                                                                      <
                                                                       <
                                                                        <$amount, 'Switzerland', 'CHF', 
                                                                         'YYMMDD', 'Purchase', ~UN>, 
                                                                        'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                       <'CDA', $furtherData>, ~ATC, 'IAD', 
                                                                       'ARQC'>)⊕
                                                                  p8('ARC')))
                                                       >, 
                                                       <'CDA', $furtherData>, ~ATC, 'IAD', 'TC'>)
                                             ) @ #vk.81 )
                                        case Card_Responds_To_Second_GenerateAC_CDA
                                        solve( !KU( MAC_arpc(f(~MK, ~ATC),
                                                             (
                                                              MAC(f(~MK, ~ATC),
                                                                  <
                                                                   <
                                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                     'Purchase', ~UN>, 
                                                                    'TVR', 'PlainPIN', 'HHMMSS'>, 
                                                                   <'CDA', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                                  >)⊕
                                                              p8('ARC')))
                                               ) @ #vk.84 )
                                          case Terminal_Sends_Second_GenerateAC_CDA
                                          SOLVED // trace found
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy_MK:
  all-traces
  "∀ MK #i.
    (SecretMK( MK ) @ #i) ⇒
    ((¬(∃ #j. !KU( MK ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ MK #i.
  (SecretMK( MK ) @ #i)
 ∧
  (∃ #j. (!KU( MK ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( !LtkBank( $Bank, ~privkBank ) ▶₃ #i )
  case Create_Bank
  solve( !CertBank( $Bank, certBank ) ▶₄ #i )
    case Create_Bank
    solve( !IssuingCA( $Bank, $CA.1 ) ▶₅ #i )
      case Create_Bank
      solve( !KU( ~MK ) @ #j )
        case Compromise_Bank_Card_ShK
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma secrecy_privkCard:
  all-traces
  "∀ privkCard #i.
    (SecretPrivkCard( privkCard ) @ #i) ⇒
    ((¬(∃ #j. !KU( privkCard ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ privkCard #i.
  (SecretPrivkCard( privkCard ) @ #i)
 ∧
  (∃ #j. (!KU( privkCard ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM, AIP
       ) ▶₀ #i )
  case Create_Card
  solve( !IssuingBank( ~PAN, $Bank.1 ) ▶₂ #i )
    case Create_Card
    solve( !LtkBank( $Bank, ~privkBank.1 ) ▶₃ #i )
      case Create_Bank
      solve( !KU( ~privkCard ) @ #j )
        case Compromise_Card
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma secrecy_PIN:
  all-traces
  "∀ PIN #i.
    (SecretPIN( PIN ) @ #i) ⇒
    ((¬(∃ #j. !KU( PIN ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ PIN #i.
  (SecretPIN( PIN ) @ #i)
 ∧
  (∃ #j. (!KU( PIN ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Set_PIN( ~PAN, CVM, $CA, $Bank ) ▶₁ #i )
  case Create_Card
  solve( !KU( ~PIN ) @ #j )
    case Terminal_Processes_CVM_PlainPIN_case_1
    solve( !KU( ~PAN ) @ #vk.4 )
      case Card_Responds_To_ReadRecord_DDA_case_1
      solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.17 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', furtherData.1>,
                         ~privkBank.1)
               ) @ #vk.20 )
          case c_sign
          solve( !KU( ~privkBank.1 ) @ #vk.38 )
            case Compromise_Bank
            solve( !KU( pk(~privkBank.1) ) @ #vk.24 )
              case Card_Responds_To_ReadRecord_DDA
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy_PAN:
  all-traces
  "∀ PAN #i.
    (SecretPAN( PAN ) @ #i) ⇒
    ((¬(∃ #j. !KU( PAN ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ PAN #i.
  (SecretPAN( PAN ) @ #i)
 ∧
  (∃ #j. (!KU( PAN ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( !LtkBank( $Bank, ~privkBank ) ▶₃ #i )
  case Create_Bank
  solve( !CertBank( $Bank, certBank ) ▶₄ #i )
    case Create_Bank
    solve( !IssuingCA( $Bank, $CA.1 ) ▶₅ #i )
      case Create_Bank
      solve( !KU( ~PAN ) @ #j )
        case Card_Responds_To_ReadRecord_DDA_case_1
        SOLVED // trace found
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: models-n-proofs/contact/Contact_CDA_PlainPIN_Online.spthy

  output:          models-n-proofs/contact/Contact_CDA_PlainPIN_Online.proof
  processing time: 5608.202856076s
  ARPC_source (all-traces): verified (22 steps)
  executable (exists-trace): verified (35 steps)
  bank_accepts (all-traces): verified (7008 steps)
  auth_to_terminal_minimal (all-traces): falsified - found trace (20 steps)
  auth_to_bank_minimal (all-traces): falsified - found trace (23 steps)
  secrecy_MK (all-traces): verified (6 steps)
  secrecy_privkCard (all-traces): verified (6 steps)
  secrecy_PIN (all-traces): falsified - found trace (9 steps)
  secrecy_PAN (all-traces): falsified - found trace (6 steps)

==============================================================================
